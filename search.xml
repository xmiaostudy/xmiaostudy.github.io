<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue-error:digital envelope routines::initialization error</title>
      <link href="/2023/02/02/vue-error-digital-envelope-routines-initialization-error/"/>
      <url>/2023/02/02/vue-error-digital-envelope-routines-initialization-error/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“scripts”: {    </p><p>“serve”: </p><p>“SET NODE_OPTIONS=–openssl-legacy-provider &amp;&amp; vue-cli-service serve”,     </p><p>“build”:</p><p> “SET NODE_OPTIONS=–openssl-legacy-provider &amp;&amp;vue-cli-service build”,   </p><p>},</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes（k8s）--study</title>
      <link href="/2023/01/27/Kubernetes%EF%BC%88k8s%EF%BC%89-study/"/>
      <url>/2023/01/27/Kubernetes%EF%BC%88k8s%EF%BC%89-study/</url>
      
        <content type="html"><![CDATA[<h1 id="Kubernetes（k8s）–study"><a href="#Kubernetes（k8s）–study" class="headerlink" title="Kubernetes（k8s）–study"></a>Kubernetes（k8s）–study</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="/2023/01/27/Kubernetes%EF%BC%88k8s%EF%BC%89-study/image-20230127211540507.png" alt="image-20230127211540507"></p><p><img src="/2023/01/27/Kubernetes%EF%BC%88k8s%EF%BC%89-study/image-20230127211901283.png" alt="image-20230127211901283"></p><p><img src="/2023/01/27/Kubernetes%EF%BC%88k8s%EF%BC%89-study/image-20230127212757105.png" alt="image-20230127212757105"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker--study</title>
      <link href="/2023/01/26/docker-study/"/>
      <url>/2023/01/26/docker-study/</url>
      
        <content type="html"><![CDATA[<h1 id="docker–study"><a href="#docker–study" class="headerlink" title="docker–study"></a>docker–study</h1><h2 id="docker–概念"><a href="#docker–概念" class="headerlink" title="docker–概念"></a>docker–概念</h2><p>docker–image镜像：</p><blockquote><p>docker镜像文件类似java的类模板</p><p>docker容器实例类似java中new出来的实例对象</p></blockquote><p>docker–container容器：</p><blockquote><p>容器利用镜像创建的运行实例</p></blockquote><p>docker–repository仓库</p><blockquote><p>集中存放镜像文件的场所</p></blockquote><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>第一步:安装过会更新</p><blockquote><p>yum -y install gcc</p><p> yum -y install gcc-c++</p></blockquote><p>跟着官网走</p><blockquote><p>yum-config-manager –add-repo <a href="https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p><p>更新yum安装速度</p><p>yum makecache fast</p></blockquote><h2 id="docker–常用命令"><a href="#docker–常用命令" class="headerlink" title="docker–常用命令"></a>docker–常用命令</h2><blockquote><p>学单词的时候到了—————-</p><p>systemctl start docker</p><p>systemctl stop docker</p><p>systemctl restart docker</p><p>systemctl status docker</p><p>systemctl enable docker</p><p>docker info</p><p>docker –help</p></blockquote><h3 id="docker–镜像（操作命令）"><a href="#docker–镜像（操作命令）" class="headerlink" title="docker–镜像（操作命令）"></a>docker–镜像（操作命令）</h3><blockquote><p>docker images</p><p>docker search </p><p>docker search –limit 5 redis</p><p>docker pull redis   ##默认版本latest，可以redis:5.7   指定版本号</p><p>docker system df    ## 查看docker使用情况</p><p>docker rmi 镜像ID</p><p>docker rmi -f  镜像ID</p><p>docker images  -qa  ##显示所有镜像ID</p><p>docker rmi -f  (docker images  -qa)  ##删除所有镜像</p></blockquote><h3 id="docker–容器（操作命令）"><a href="#docker–容器（操作命令）" class="headerlink" title="docker–容器（操作命令）"></a>docker–容器（操作命令）</h3><p><img src="/2023/01/26/docker-study/image-20230126231834519.png" alt="image-20230126231834519"></p><p><img src="/2023/01/26/docker-study/image-20230126231800732.png" alt="image-20230126231800732"></p><blockquote><p>docker ps</p><p>docker  ps  -a</p><p>docker   ps   -n   2  ## 显示最近两个容器</p><p>docker start ID</p><p>docker stop  ID</p><p>docker kill  ID</p><p>docker  rm  ID  ##先 stop 容器 —docker  stop  ID</p><p>docker rm  -f  ID   ##强制remove</p></blockquote><h3 id="docker-——exit"><a href="#docker-——exit" class="headerlink" title="docker ——exit"></a>docker ——exit</h3><blockquote><p>docker  run  -d  redis  ## 后台运行</p><p>docker logs ID   ##查看日志</p><p>docker  top    ID        ##查看容器运行的进程</p><p>docker    inspect  ID        ## 容器内部细节</p><p>#######################################################</p><p>Ctrl +  q  +  p       ##退出容器，不终止</p><p>docker  exec  -it  redis  /bin/bash    ## 重新进入容器</p><p>docker  attach   ID</p></blockquote><p><img src="/2023/01/26/docker-study/image-20230127102149828.png" alt="image-20230127102149828"></p><p>docker  cp  ID:文件路径  主机文件路径</p><p><img src="/2023/01/26/docker-study/image-20230127103608983.png" alt="image-20230127103608983"></p><p>docker export 容器ID  &gt;   xxx.tar</p><p><img src="/2023/01/26/docker-study/image-20230127103956334.png" alt="image-20230127103956334"></p><p>导入</p><p><img src="/2023/01/26/docker-study/image-20230127104349286.png" alt="image-20230127104349286"></p><p><img src="/2023/01/26/docker-study/image-20230127104643679.png" alt="image-20230127104643679"></p><p>查看</p><p><img src="/2023/01/26/docker-study/image-20230127104816839.png" alt="image-20230127104816839"></p><h3 id="docker—洋葱—层级"><a href="#docker—洋葱—层级" class="headerlink" title="docker—洋葱—层级"></a>docker—洋葱—层级</h3><p>给容器添加一个vim 指令</p><p><img src="/2023/01/26/docker-study/image-20230127110622953.png" alt="image-20230127110622953"></p><p>示例</p><p><img src="/2023/01/26/docker-study/image-20230127111102266.png" alt="image-20230127111102266"></p><p>查看保存的内容</p><p><img src="/2023/01/26/docker-study/image-20230127111152947.png" alt="image-20230127111152947"></p><h3 id="docker—commit"><a href="#docker—commit" class="headerlink" title="docker—commit"></a>docker—commit</h3><p>docker commit -m=”vim add ok” -a=”miao” a1cb6b3e8c35 test/myubuntu</p><p><img src="/2023/01/26/docker-study/image-20230127111752411.png" alt="image-20230127111752411"></p><p>示例</p><p><img src="/2023/01/26/docker-study/image-20230127112548163.png" alt="image-20230127112548163"></p><h2 id="docker–私人repository"><a href="#docker–私人repository" class="headerlink" title="docker–私人repository"></a>docker–私人repository</h2><p>一</p><p>docker pull registry</p><p>二</p><p>docker run -d -p 5000:5000 -v /lycstudy/myregistry/:/tmp/registry –privileged=true registry</p><p><img src="/2023/01/26/docker-study/image-20230127121015833.png" alt="image-20230127121015833"></p><p>三</p><p>查看仓库</p><p>curl -XGET <a href="http://172.17.0.1:5000/v2/_catalog">http://172.17.0.1:5000/v2/_catalog</a></p><p>ifconfig  本机   —–》172.17.0.1</p><p><img src="/2023/01/26/docker-study/image-20230127123607782.png" alt="image-20230127123607782"></p><p>本地仓库为空</p><p><img src="/2023/01/26/docker-study/image-20230127124112244.png" alt="image-20230127124112244"></p><p>cp一个镜像</p><p> docker tag test/myubuntu:1.2 172.17.0.1:5000/test/myubuntu:1.2</p><p><img src="/2023/01/26/docker-study/image-20230127124630485.png" alt="image-20230127124630485"></p><p>四–重要</p><p>vim /etc/docker/daemon.json</p><p><img src="/2023/01/26/docker-study/image-20230127125108173.png" alt="image-20230127125108173"></p><p>五—推送本地仓库</p><p><img src="/2023/01/26/docker-study/image-20230127125804536.png" alt="image-20230127125804536"></p><p>从本地仓库 拉取镜像</p><p><img src="/2023/01/26/docker-study/image-20230127130515884.png" alt="image-20230127130515884"></p><h2 id="容器卷"><a href="#容器卷" class="headerlink" title="容器卷"></a>容器卷</h2><p><img src="/2023/01/26/docker-study/image-20230127130938591.png" alt="image-20230127130938591"></p><p><img src="/2023/01/26/docker-study/image-20230127131506969.png" alt="image-20230127131506969"></p><p>数据实时更新，数据绑定</p><p> docker run -it –privileged=true -v /tmp/host_data:/tmp/docker_data –name=u1 ubuntu</p><p>容器</p><p><img src="/2023/01/26/docker-study/image-20230127132726819.png" alt="image-20230127132726819"></p><p>本地</p><p><img src="/2023/01/26/docker-study/image-20230127132847402.png" alt="image-20230127132847402"></p><p>查看—–docker  inspect  容器ID</p><p><img src="/2023/01/26/docker-study/image-20230127133229186.png" alt="image-20230127133229186"></p><h3 id="读写"><a href="#读写" class="headerlink" title="读写"></a>读写</h3><blockquote><p>docker run -it –privileged=true -v /tmp/host_data:/tmp/docker_data –name=u1 ubuntu</p><p>##################</p><p>ro     ## read only    表示容器只能读取文件，不能写文件</p><p>docker run -it –privileged=true -v /tmp/host_data:/tmp/docker_data:ro</p><p> –name=u1 ubuntu</p></blockquote><p>继承—–容器1继承容器2</p><p>docker run -it –privileged=true –volumes-from u1 –name u2 ubuntu</p><p><img src="/2023/01/26/docker-study/image-20230127141001851.png" alt="image-20230127141001851"></p><h2 id="try–other—Tomcat-and-mysql-—install"><a href="#try–other—Tomcat-and-mysql-—install" class="headerlink" title="try–other—Tomcat  and  mysql  —install"></a>try–other—Tomcat  and  mysql  —install</h2><p>安装 or </p><h3 id="Tomcat-10-版本-会有以下小问题——————————"><a href="#Tomcat-10-版本-会有以下小问题——————————" class="headerlink" title="Tomcat 10 版本 会有以下小问题——————————-"></a>Tomcat 10 版本 会有以下小问题——————————-</h3><p>解决–docker安装Tomcat  访问不了</p><p> docker run -d -p 8080:8080 –name=tomcat22 tomcat        ##启动容器</p><p> docker exec -it 容器ID  /bin/bash        ##进入容器</p><p><img src="/2023/01/26/docker-study/image-20230127144302067.png" alt="image-20230127144302067"></p><h3 id="MySQL—"><a href="#MySQL—" class="headerlink" title="MySQL—-"></a>MySQL—-</h3><p>安装———</p><p><img src="/2023/01/26/docker-study/image-20230127151222849.png" alt="image-20230127151222849"></p><p><img src="/2023/01/26/docker-study/image-20230127151056615.png" alt="image-20230127151056615"></p><p><img src="/2023/01/26/docker-study/image-20230127151244589.png" alt="image-20230127151244589"></p><h4 id="本地打开图形化界面操作远程mysql"><a href="#本地打开图形化界面操作远程mysql" class="headerlink" title="本地打开图形化界面操作远程mysql"></a>本地打开图形化界面操作远程mysql</h4><p>docker run –name 22mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123123 -d mysql:5.7</p><p>进入</p><p>docker exec -it cdb0279aa74b bash</p><p>刷新密码权限</p><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ IDENTIFIED BY ‘123123’ WITH GRANT OPTION;</p><p>刷新权限</p><p>flush privileges;</p><p>数据会同步</p><p><img src="/2023/01/26/docker-study/image-20230127181303392.png" alt="image-20230127181303392"></p><p><img src="/2023/01/26/docker-study/image-20230127181602286.png" alt="image-20230127181602286"></p><h4 id="进阶一点mysql"><a href="#进阶一点mysql" class="headerlink" title="进阶一点mysql"></a>进阶一点mysql</h4><p>docker run -d -p 3306:3306 –privileged=true </p><p>-v /lycstudy/mysql/log:/var/log/mysql</p><p>-v /lycstudy/mysql/data:/var/lib/mysql</p><p>-v /lycstudy/mysql/conf:/etc/mysql/conf.d</p><p>-e MYSQL_ROOT_PASSWORD=123123</p><p>–name  mysql  mysql : tag(版本号)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --privileged=true </span><br><span class="line">-v /lycstudy/mysql/log:/var/log/mysql</span><br><span class="line">-v /lycstudy/mysql/data:/var/lib/mysql</span><br><span class="line">-v /lycstudy/mysql/conf:/etc/mysql/conf.d</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123123</span><br><span class="line">--name  mysql  mysql : tag(版本号)</span><br></pre></td></tr></table></figure><p>——修改乱码问题——</p><p>修改—–/lycstudy/mysql/conf</p><p>cd  /lycstudy/mysql/conf</p><p>vim  my.conf</p><p>添加–不一定有用（百度）</p><blockquote><p>[client]</p><p> default_character_set=utf8</p><p> [mysqld] </p><p>collation_server = utf8_general_ci</p><p> character_set_server=utf8</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8 </span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8 </span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>查看编码—</p><p>show VARIABLES like ‘CHARACTER%’</p><p><img src="/2023/01/26/docker-study/image-20230127192314983.png" alt="image-20230127192314983"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springcloud--study</title>
      <link href="/2023/01/25/springcloud-study/"/>
      <url>/2023/01/25/springcloud-study/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx-study</title>
      <link href="/2023/01/24/nginx-study/"/>
      <url>/2023/01/24/nginx-study/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx–study"><a href="#Nginx–study" class="headerlink" title="Nginx–study"></a>Nginx–study</h1><h2 id="nginx–概述"><a href="#nginx–概述" class="headerlink" title="nginx–概述"></a>nginx–概述</h2><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><blockquote><p>正向代理：浏览器配置了代理服务器</p><p>反向代理：（暴露代理服务器地址，隐藏真实服务器地址）</p></blockquote><p><img src="/2023/01/24/nginx-study/image-20230124164501146.png" alt="image-20230124164501146"></p><p><img src="/2023/01/24/nginx-study/image-20230124165213235.png" alt="image-20230124165213235"></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><blockquote><p>多个请求分发不同的服务器</p></blockquote><p><img src="/2023/01/24/nginx-study/image-20230124170043930.png" alt="image-20230124170043930"></p><h2 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h2><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><blockquote><p>1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。<br>2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。<br>3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。<br>4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。<br>5、location块：配置请求的路由，以及各种页面的处理情况。</p></blockquote><h1 id="MQ–study"><a href="#MQ–study" class="headerlink" title="MQ–study"></a>MQ–study</h1><h2 id="mq–概念"><a href="#mq–概念" class="headerlink" title="mq–概念"></a>mq–概念</h2><blockquote><p>mq–message queue</p><p>本质是队列</p><p>FIFO–先进先出</p></blockquote><h3 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h3><blockquote><p>不会宕机</p><p>需要时间等待</p></blockquote><blockquote><p>producer—consumer</p><p>默认模式 是 direct模式 ，支持routingkey，根据条件分发message</p></blockquote><p><img src="/2023/01/24/nginx-study/image-20230125102538196.png" alt="image-20230125102538196"></p><blockquote><p>direct 模式 </p></blockquote><p><img src="/2023/01/24/nginx-study/image-20230125105623234.png" alt="image-20230125105623234"></p><p>安装docker<br>curl -sSL <a href="https://get.daocloud.io/docker">https://get.daocloud.io/docker</a> | sh<br>查看docker版本<br>docker -version<br>搜索需要安装的镜像 例如：mysql<br>docker search mysql<br>安装<br>docker pull mysql<br>查看安装的镜像<br>docker images<br>删除镜像<br>docker rmi 容器ID</p><p>根据镜像启动容器<br>docker run –name mytomcat(自定义名字) -d tomcat:latest(带上版本)<br>查看启动的容器<br>docker ps<br>停止运行的容器<br>docker stop  容器的ID<br>查看所有的容器<br>docker ps -a<br>启动容器<br>docker start 容器ID<br>删除一个容器<br>docker rm 容器ID</p><p>启动容器并设置端口映射<br>docker run -d -p 8888:8080 tomcat</p><p>Nginx———————————————————————–使用<br>yum install gcc-c++<br>安装其他依赖<br>yum install -y pcre pcre-devel<br>yum install -y zlib zlib-devel<br>yum install -y openssl openssl-devel<br>第三步：解压nginx压缩包并安装<br>解压 nginx-1.17.5.tar.gz<br>tar -zxvf nginx-1.17.5.tar.gz<br>解压之后，进入加压文件<br>然后进行配置，推荐使用默认配置。 命令如下<br>cd nginx-1.17.5<br>./configure<br>进行编译<br>make<br>make install<br>启动<br>./nginx<br>查看启动命令<br>ps -ef | grep nginx</p><p>查看防火墙开放端口<br>firewall-cmd –list-all<br>开放端口<br>sudo firewall-cmd –add-port=9999/tcp –permanent<br>重启防火墙<br>firewall-cmd –reload</p><p>查看端口占用情况<br>sudo netstat -apn | grep 80</p><p>Nginx常用命令<br>前提是 进入nginx的目录<br>/usr/local/nginx/sbin<br>查看版本号<br>./nginx -v<br>启动<br>./nginx<br>停止<br>./nginx -s stop<br>重新加载nginx<br>./nginx -s reload     </p><p>MQ—————————————————<br>docker run -it –rm –name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.11-management<br>docker run -d  –name myrabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 5672:5672 -p 15672:15672 rabbitmq:management</p><p>后期整理————-</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot-study</title>
      <link href="/2023/01/20/springboot-study/"/>
      <url>/2023/01/20/springboot-study/</url>
      
        <content type="html"><![CDATA[<h2 id="springBoot-study"><a href="#springBoot-study" class="headerlink" title="springBoot-study"></a>springBoot-study</h2><h3 id="注解-configuration"><a href="#注解-configuration" class="headerlink" title="注解@configuration"></a>注解@configuration</h3><blockquote><p>@configuration</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类使用<span class="doctag">@bean</span>标注方法上给容器中注册组件，默认是单实例--singleton</span></span><br><span class="line"><span class="comment"> * 配置类也是组件--<span class="doctag">@configuration</span></span></span><br><span class="line"><span class="comment"> * proxyBeanMethods:代理bean的方法</span></span><br><span class="line"><span class="comment"> *      full（proxyBeanMethods = true） 保持单实例</span></span><br><span class="line"><span class="comment"> *      lite（proxyBeanMethods = false） 外部调用配置类组件，都会调用一个新的组件实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ImportResource</span>(&quot;classpath:bean.xml&quot;) 导入配置文件xxx.xml</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span> <span class="comment">//告诉springboot这是一个配置类 == 配置文件 bean.xml</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部对配置类中的组件获取多次，都是之前注册容器中的单实例。（单实例在容器加载后注册组件）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件，方法名作为组件的id，返回类型是组件类型，返回类型是组件在容器中的实例</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;唐僧&quot;</span>,<span class="string">&quot;33&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(&quot;tom&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">pet1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;mimi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>两个测试类</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pet</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pet</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pet&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#######################################</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&#x27;&quot;</span> + age + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>主程序入口</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主程序类：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span>：标识这是一个主程序类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@SpringBootApplication(scanBasePackages = &quot;com.miao&quot;)可以扫描主程序上层的组件</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//返回IOC容器</span></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        <span class="comment">//查看所有组件</span></span><br><span class="line">        <span class="keyword">for</span> (String name : run.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom1</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;容器中的组件：&quot;</span>+(tom == tom1));</span><br><span class="line">        <span class="comment">//查看配置类是否组件@configuration</span></span><br><span class="line">        <span class="comment">//com.miao.boot.config.MyConfig$$EnhancerBySpringCGLIB$$891ae483@55caeb35 被代理（@Configuration(proxyBeanMethods = true)）</span></span><br><span class="line">        <span class="type">MyConfig</span> <span class="variable">bean</span> <span class="operator">=</span> run.getBean(MyConfig.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">        <span class="comment">//@Configuration(proxyBeanMethods = true)代理对象调用方法，Springboot会检查组件是否存在容器中，若存在，则获取</span></span><br><span class="line">        <span class="comment">//保持单实例</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> bean.user1();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> bean.user1();</span><br><span class="line">        System.out.println(user == user1);</span><br><span class="line">        </span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Configuration</span>(proxyBeanMethods = true)情况下</span></span><br><span class="line"><span class="comment">         * result--true：容器中寻找组件，如果存在依赖关系</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Configuration</span>(proxyBeanMethods = false)</span></span><br><span class="line"><span class="comment">         * result--false:不会从容器中寻找组件依赖关系，容器外部创建bean实例</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;user1&quot;</span>, User.class);</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom2</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户的宠物：&quot;</span>+(user2.getPet()==tom2));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Configuration(proxyBeanMethods = true)情况下一</p></blockquote><p><img src="/2023/01/20/springboot-study/image-20230120232940882.png" alt="image-20230120232940882"></p><blockquote><p>二</p></blockquote><p><img src="/2023/01/20/springboot-study/image-20230120235032312.png" alt="image-20230120235032312"></p><p><img src="/2023/01/20/springboot-study/image-20230120235057492.png" alt="image-20230120235057492"></p><blockquote><p>@Configuration(proxyBeanMethods = false)情况下</p></blockquote><p><img src="/2023/01/20/springboot-study/image-20230120235220262.png" alt="image-20230120235220262"></p><h3 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h3><p><img src="/2023/01/20/springboot-study/image-20230121081243687.png" alt="image-20230121081243687"></p><h3 id="conditional–条件判断是否注册"><a href="#conditional–条件判断是否注册" class="headerlink" title="@conditional–条件判断是否注册"></a>@conditional–条件判断是否注册</h3><blockquote><p>例如是否注册bean</p></blockquote><p><img src="/2023/01/20/springboot-study/image-20230121084139696.png" alt="image-20230121084139696"></p><h3 id="importResource–导入配置资源"><a href="#importResource–导入配置资源" class="headerlink" title="@importResource–导入配置资源"></a>@importResource–导入配置资源</h3><p><img src="/2023/01/20/springboot-study/image-20230121085838153.png" alt="image-20230121085838153"></p><p><img src="/2023/01/20/springboot-study/image-20230121085859969.png" alt="image-20230121085859969"></p><p><img src="/2023/01/20/springboot-study/image-20230121085937353.png" alt="image-20230121085937353"></p><h3 id="ConfigurationProperties–配置绑定"><a href="#ConfigurationProperties–配置绑定" class="headerlink" title="@ConfigurationProperties–配置绑定"></a>@ConfigurationProperties–配置绑定</h3><blockquote><p>配置文件</p></blockquote><p><img src="/2023/01/20/springboot-study/image-20230121091134742.png" alt="image-20230121091134742"></p><blockquote><p>@Component–使用前需要标注为组件</p><p>@ConfigurationProperties(prefix = “person”)</p></blockquote><p><img src="/2023/01/20/springboot-study/image-20230121091239147.png" alt="image-20230121091239147"></p><blockquote><p>@EnableConfigurationProperties(Cat.class)</p><p>@ConfigurationProperties(prefix = “person”)</p></blockquote><p><img src="/2023/01/20/springboot-study/image-20230121091802061.png" alt="image-20230121091802061"></p><p><img src="/2023/01/20/springboot-study/image-20230121091817469.png" alt="image-20230121091817469"></p><h3 id="SpringBootApplication–查看"><a href="#SpringBootApplication–查看" class="headerlink" title="@SpringBootApplication–查看"></a>@SpringBootApplication–查看</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><blockquote><p>本质是一个配置注解</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><blockquote><p>扫描包的一些规则</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br></pre></td></tr></table></figure><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h5><blockquote><p>import–导入组件到容器中</p></blockquote><h5 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Import(AutoConfigurationPackages.Registrar.class)</span><br><span class="line">public @interface AutoConfigurationPackage &#123;</span><br><span class="line">&#125;</span><br><span class="line">##利用registrar给容器中导入一系列组件</span><br><span class="line">##将指定的一个包下的所有组件导入进来，主程序MainApplication所在包下</span><br></pre></td></tr></table></figure><h5 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import(AutoConfigurationImportSelector.class)"></a>@Import(AutoConfigurationImportSelector.class)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">利用getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">给容器中批量导入组件</span><br><span class="line">    </span><br><span class="line">调用List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">获取所有需要导入到容器的组件</span><br><span class="line">    </span><br><span class="line">利用工厂加载Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span></span><br><span class="line">获取所有的组件</span><br><span class="line">    </span><br><span class="line">从<span class="string">&quot;META-INF/spring.factories&quot;</span>位置加载文件</span><br><span class="line">默认扫描当前系统下所有<span class="string">&quot;META-INF/spring.factories&quot;</span>位置的文件</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring-boot-autoconfigure-<span class="number">2.3</span><span class="number">.4</span>.RELEASE.jar</span><br><span class="line">下的<span class="string">&quot;META-INF/spring.factories&quot;</span></span><br><span class="line"></span><br><span class="line">文件里写死了springboot一启动就会给容器中加载所有的配置类</span><br></pre></td></tr></table></figure><p><img src="/2023/01/20/springboot-study/image-20230121101932558.png" alt="image-20230121101932558"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring-boot-autoconfigure-<span class="number">2.3</span><span class="number">.4</span>.RELEASE.jar</span><br><span class="line">下的<span class="string">&quot;META-INF/spring.factories&quot;</span></span><br><span class="line"></span><br><span class="line">文件里写死了springboot一启动就会给容器中加载所有的配置类</span><br><span class="line">###################################################</span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br></pre></td></tr></table></figure><h5 id="按需分配"><a href="#按需分配" class="headerlink" title="按需分配"></a>按需分配</h5><blockquote><p>虽然加载了所有的配置类，最终会按需装配（按照conditional条件注解）</p></blockquote><p><img src="/2023/01/20/springboot-study/image-20230121102521409.png" alt="image-20230121102521409"></p><blockquote><p>小结</p><ul><li>springboot先加载所有的自动配置类，xxx.autoconfiguration</li><li>每个自动配置类按照条件生效</li><li>默认绑定配置文件指定的值，xxx.properties中获取</li><li>定制化配置<ul><li>自己@bean替换底层组件</li><li>查看并修改组件配置文件</li></ul></li><li>xx.autoconfiguration–组件–xxproperties中获取–在application.properties中设置属性</li></ul></blockquote><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><blockquote><p>配置文件的基本用法</p></blockquote><p><img src="/2023/01/20/springboot-study/image-20230121132812145.png" alt="image-20230121132812145"></p><h4 id="配置属性绑定–提示效果"><a href="#配置属性绑定–提示效果" class="headerlink" title="配置属性绑定–提示效果"></a>配置属性绑定–提示效果</h4><p><img src="/2023/01/20/springboot-study/image-20230121135319348.png" alt="image-20230121135319348"></p><blockquote><p>依赖</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--      Configuring the Annotation Processor 配置文件绑定配置属性-提示效果 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><p><img src="/2023/01/20/springboot-study/image-20230121142724925.png" alt="image-20230121142724925"></p><p><img src="/2023/01/20/springboot-study/image-20230121144335519.png" alt="image-20230121144335519"></p><h3 id="mybatis配置"><a href="#mybatis配置" class="headerlink" title="mybatis配置"></a>mybatis配置</h3><p><img src="/2023/01/20/springboot-study/image-20230123123552498.png" alt="image-20230123123552498"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>study-document</title>
      <link href="/2023/01/20/study-document/"/>
      <url>/2023/01/20/study-document/</url>
      
        <content type="html"><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><strong><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference">Spring Boot 中文文档</a></strong></p><p><a href="https://www.docs4dev.com/docs/zh/spring-boot/1.5.9.RELEASE/reference">https://www.docs4dev.com/docs/zh/spring-boot/1.5.9.RELEASE/reference</a></p><p><strong><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference">Spring Framework 中文文档</a></strong></p><p><a href="https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference">https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference</a></p><p><strong><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-cloud/Edgware.SR5/reference">Spring Cloud 中文文档</a></strong></p><p><a href="https://www.docs4dev.com/docs/zh/spring-cloud/Edgware.SR5/reference">https://www.docs4dev.com/docs/zh/spring-cloud/Edgware.SR5/reference</a></p><p><strong><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-security/4.2.10.RELEASE/reference">Spring Security 中文文档</a></strong></p><p><a href="https://www.docs4dev.com/docs/zh/spring-security/4.2.10.RELEASE/reference">https://www.docs4dev.com/docs/zh/spring-security/4.2.10.RELEASE/reference</a></p><p><strong><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-session/1.3.4.RELEASE/reference">Spring Session 中文文档</a></strong></p><p><a href="https://www.docs4dev.com/docs/zh/spring-session/1.3.4.RELEASE/reference">https://www.docs4dev.com/docs/zh/spring-session/1.3.4.RELEASE/reference</a></p><p><strong><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-amqp/1.7.11.RELEASE/reference">Spring AMQP 中文文档</a></strong></p><p><a href="https://www.docs4dev.com/docs/zh/spring-amqp/1.7.11.RELEASE/reference">https://www.docs4dev.com/docs/zh/spring-amqp/1.7.11.RELEASE/reference</a></p><p><strong><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-data-jpa/1.11.18.RELEASE/reference">Spring Data JPA</a></strong></p><p><a href="https://www.docs4dev.com/docs/zh/spring-data-jpa/1.11.18.RELEASE/reference">https://www.docs4dev.com/docs/zh/spring-data-jpa/1.11.18.RELEASE/reference</a></p><p><strong><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-data-jdbc/1.0.5.RELEASE/reference">Spring Data JDBC</a></strong></p><p><a href="https://www.docs4dev.com/docs/zh/spring-data-jdbc/1.0.5.RELEASE/reference">https://www.docs4dev.com/docs/zh/spring-data-jdbc/1.0.5.RELEASE/reference</a></p><p><strong><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-data-redis/1.8.18.RELEASE/reference">Spring Data Redis</a></strong></p><p><a href="https://www.docs4dev.com/docs/zh/spring-data-redis/1.8.18.RELEASE/reference">https://www.docs4dev.com/docs/zh/spring-data-redis/1.8.18.RELEASE/reference</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring-再理解-study</title>
      <link href="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/"/>
      <url>/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/</url>
      
        <content type="html"><![CDATA[<h2 id="spring注解驱动开发"><a href="#spring注解驱动开发" class="headerlink" title="spring注解驱动开发"></a>spring注解驱动开发</h2><h3 id="组件注册-configuration"><a href="#组件注册-configuration" class="headerlink" title="组件注册--@configuration"></a>组件注册--@configuration</h3><blockquote><p>config配置类</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置类==配置文件--（相当于bean.xml）</span></span><br><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//告诉spring这是一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;person11&quot;)</span>  <span class="comment">//给容器中注册一个bean，类型是 返回值的类型，id是 方法名作为id</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;22&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testconfig</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MainConfig.class);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(Person.class);</span><br><span class="line">    System.out.println(bean);</span><br><span class="line">    String[] namesForType = context.getBeanNamesForType(Person.class);</span><br><span class="line">    <span class="keyword">for</span> (String name:namesForType) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119161734628.png" alt="image-20230119161734628"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119161623739.png" alt="image-20230119161623739"></p><h3 id="组件注册-componentScan"><a href="#组件注册-componentScan" class="headerlink" title="组件注册--@componentScan"></a>组件注册--@componentScan</h3><blockquote><p>excludeFilters()</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119165953086.png" alt="image-20230119165953086"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119165843766.png" alt="image-20230119165843766"></p><blockquote><p>includeFilters()</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119170254622.png" alt="image-20230119170254622"></p><blockquote><p>compomentScans()</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119170623239.png" alt="image-20230119170623239"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119170636574.png" alt="image-20230119170636574"></p><blockquote><p>filtertype规则</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119172112689.png" alt="image-20230119172112689"></p><blockquote><p>自定义过滤规则</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119174631787.png" alt="image-20230119174631787"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilterType</span> <span class="keyword">implements</span> <span class="title class_">TypeFilter</span> &#123;</span><br><span class="line">    <span class="comment">//metadataReader:读取当前正在扫描的类的信息</span></span><br><span class="line">    <span class="comment">//metadataReaderFactory:读取其他类的任何信息</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">match</span><span class="params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前正在扫描的 注解信息</span></span><br><span class="line">        <span class="type">AnnotationMetadata</span> <span class="variable">annotationMetadata</span> <span class="operator">=</span> metadataReader.getAnnotationMetadata();</span><br><span class="line">        <span class="comment">//类信息</span></span><br><span class="line">        <span class="type">ClassMetadata</span> <span class="variable">classMetadata</span> <span class="operator">=</span> metadataReader.getClassMetadata();</span><br><span class="line">        <span class="comment">//类资源（类的路径）</span></span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> metadataReader.getResource();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取类的 名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> classMetadata.getClassName();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&gt;&quot;</span>+className);</span><br><span class="line">        <span class="keyword">if</span> (className.contains(<span class="string">&quot;er&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119174731210.png" alt="image-20230119174731210"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119174808080.png" alt="image-20230119174808080"></p><h3 id="scope"><a href="#scope" class="headerlink" title="@scope"></a>@scope</h3><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119205457715.png" alt="image-20230119205457715"></p><blockquote><p>singleton单实例</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119204628777.png" alt="image-20230119204628777"></p><blockquote><p>结果</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119204653302.png" alt="image-20230119204653302"></p><blockquote><p>ioc容器启动时  调用方法创建对象</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119204844495.png" alt="image-20230119204844495"></p><blockquote><p>prototype多实例</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119205330230.png" alt="image-20230119205330230"></p><h3 id="lazy"><a href="#lazy" class="headerlink" title="@lazy"></a>@lazy</h3><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119210024767.png" alt="image-20230119210024767"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119210112363.png" alt="image-20230119210112363"></p><h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119214324491.png" alt="image-20230119214324491"></p><blockquote><p>两个系统</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119214406207.png" alt="image-20230119214406207"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119214427964.png" alt="image-20230119214427964"></p><blockquote><p>结果</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119214654111.png" alt="image-20230119214654111"></p><p>linux</p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119215516941.png" alt="image-20230119215516941"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119215604037.png" alt="image-20230119215604037"></p><blockquote><p>结果</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119215633939.png" alt="image-20230119215633939"></p><h3 id="import–注册bean"><a href="#import–注册bean" class="headerlink" title="import–注册bean"></a>import–注册bean</h3><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119221011931.png" alt="image-20230119221011931"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119221030394.png" alt="image-20230119221030394"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119221105954.png" alt="image-20230119221105954"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119221141714.png" alt="image-20230119221141714"></p><h3 id="importselector–注册bean"><a href="#importselector–注册bean" class="headerlink" title="importselector–注册bean"></a>importselector–注册bean</h3><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119222336639.png" alt="image-20230119222336639"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119222234140.png" alt="image-20230119222234140"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119222400052.png" alt="image-20230119222400052"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119222414884.png" alt="image-20230119222414884"></p><h3 id="ImportBeanDefinitionRegistrar–注册bean"><a href="#ImportBeanDefinitionRegistrar–注册bean" class="headerlink" title="ImportBeanDefinitionRegistrar–注册bean"></a>ImportBeanDefinitionRegistrar–注册bean</h3><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119224150262.png" alt="image-20230119224150262"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119224215541.png" alt="image-20230119224215541"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119224236016.png" alt="image-20230119224236016"></p><h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119231414057.png" alt="image-20230119231414057"></p><blockquote><p>实现factorybean</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miao.pojo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CatFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Teacher&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Teacher <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FactoryBean--CatFactoryBean--Teacher&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Teacher.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//true: 单例，容器中bean只有一份</span></span><br><span class="line">    <span class="comment">//false:多例，每次获取都会创建一个bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119231631973.png" alt="image-20230119231631973"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230119231656770.png" alt="image-20230119231656770"></p><h2 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h2><h3 id="生命周期–bean的初始化"><a href="#生命周期–bean的初始化" class="headerlink" title="生命周期–bean的初始化"></a>生命周期–bean的初始化</h3><blockquote><p>配置类</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bean 的生命周期</span></span><br><span class="line"><span class="comment"> *      bean的创建--初始化--销毁的过程</span></span><br><span class="line"><span class="comment"> * 容器管理bean的生命周期</span></span><br><span class="line"><span class="comment"> *      可以自定义初始化和销毁方法，容器在bean进行当前的生命周期时候调用自定义的初始化和销毁方法</span></span><br><span class="line"><span class="comment"> * 指定初始化和销毁方法</span></span><br><span class="line"><span class="comment"> *       指定init-method和destroy-method</span></span><br><span class="line"><span class="comment"> * 构造对象</span></span><br><span class="line"><span class="comment"> *      单例：容器启动时创建对象</span></span><br><span class="line"><span class="comment"> *      多例：获取的时候创建对象</span></span><br><span class="line"><span class="comment"> * 销毁</span></span><br><span class="line"><span class="comment"> *      单例：容器关闭的时候</span></span><br><span class="line"><span class="comment"> *      多例：容器不会管理bean，容器不会调用销毁方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfigLifeCycle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;init&quot;,destroyMethod = &quot;destroy&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">car</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一个类</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;car--constructor----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init ----------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120083333777.png" alt="image-20230120083333777"></p><blockquote><p>多实例bean不会调用销毁方法</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120083534790.png" alt="image-20230120083534790"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120083502789.png" alt="image-20230120083502789"></p><h3 id="实现接口–初始化和销毁"><a href="#实现接口–初始化和销毁" class="headerlink" title="实现接口–初始化和销毁"></a>实现接口–初始化和销毁</h3><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120085234646.png" alt="image-20230120085234646"></p><blockquote><p>一个类</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>, DisposableBean &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog--constructor---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog--destroy--&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog--afterPropertiesSet--&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120085155469.png" alt="image-20230120085155469"></p><blockquote><p>使用JSR250–初始化和销毁</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120090339465.png" alt="image-20230120090339465"></p><blockquote><p>一个类</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Food</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对象创建并赋值后调用</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;food--PostConstruct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;food--PreDestroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120090510267.png" alt="image-20230120090510267"></p><h3 id="beanpostprocessor–bean后置处理器"><a href="#beanpostprocessor–bean后置处理器" class="headerlink" title="beanpostprocessor–bean后置处理器"></a>beanpostprocessor–bean后置处理器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bean后置处理器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPostBeanPorocessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessBeforeInitialization&quot;</span>+beanName+<span class="string">&quot;---&quot;</span>+bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessAfterInitialization&quot;</span>+beanName+<span class="string">&quot;---&quot;</span>+bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120091657580.png" alt="image-20230120091657580"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120091747829.png" alt="image-20230120091747829"></p><h3 id="value"><a href="#value" class="headerlink" title="@value"></a>@value</h3><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120094704500.png" alt="image-20230120094704500"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120094725748.png" alt="image-20230120094725748"></p><h3 id="propertysource–读取配置文件值"><a href="#propertysource–读取配置文件值" class="headerlink" title="@propertysource–读取配置文件值"></a>@propertysource–读取配置文件值</h3><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120100435896.png" alt="image-20230120100435896"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120100452787.png" alt="image-20230120100452787"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120100509729.png" alt="image-20230120100509729"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120100529847.png" alt="image-20230120100529847"></p><blockquote><p>applicationcontext读取属性值</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120100649456.png" alt="image-20230120100649456"></p><h3 id="自动装配–autowired"><a href="#自动装配–autowired" class="headerlink" title="自动装配–autowired"></a>自动装配–autowired</h3><blockquote><ul><li><p>默认按照类型去容器中找对应的组件</p></li><li><p>如果找到对个相同的组件，再将属性的名称作为组件的id去容器中找</p><p>spring还支持：resource 和 inject注解</p></li></ul></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120104212677.png" alt="image-20230120104212677"></p><h3 id="profile–切换环境"><a href="#profile–切换环境" class="headerlink" title="profile–切换环境"></a>profile–切换环境</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * profile；</span></span><br><span class="line"><span class="comment"> *      spring提供的 可以根据当前环境，动态的激活和切换一系列组件的功能</span></span><br><span class="line"><span class="comment"> *  开发环境、测试环境、生产环境</span></span><br><span class="line"><span class="comment"> *  数据源 ：a b c</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@profile</span>: 指定组件在哪一个环境被注册到容器中，不指定，都可以注册到容器中</span></span><br><span class="line"><span class="comment"> *          加了环境标识的bean，只有这个环境被激活的时候才能注册到容器中，默认是 default 环境</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 命令行传参： -Dspring.profiles.active=test</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:/dbconfig.properties&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyconfigProfile</span> <span class="keyword">implements</span> <span class="title class_">EmbeddedValueResolverAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;db.user&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="keyword">private</span> StringValueResolver valueResolver;</span><br><span class="line">    <span class="keyword">private</span> String driverClass;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile(&quot;test&quot;)</span></span><br><span class="line">    <span class="meta">@Bean(&quot;testdatasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSourcetest</span><span class="params">(<span class="meta">@Value(&quot;$&#123;db.password&#125;&quot;)</span> String pwd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">        dataSource.setUser(user);</span><br><span class="line">        dataSource.setPassword(pwd);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">        dataSource.setDriverClass(driverClass);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Profile(&quot;dev&quot;)</span></span><br><span class="line">    <span class="meta">@Bean(&quot;devdataSource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSourcedev</span><span class="params">(<span class="meta">@Value(&quot;$&#123;db.password&#125;&quot;)</span> String pwd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">        dataSource.setUser(user);</span><br><span class="line">        dataSource.setPassword(pwd);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/dev&quot;</span>);</span><br><span class="line">        dataSource.setDriverClass(driverClass);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Profile(&quot;prod&quot;)</span></span><br><span class="line">    <span class="meta">@Bean(&quot;proddatasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSourceprod</span><span class="params">(<span class="meta">@Value(&quot;$&#123;db.password&#125;&quot;)</span> String pwd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">        dataSource.setUser(user);</span><br><span class="line">        dataSource.setPassword(pwd);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/prod&quot;</span>);</span><br><span class="line">        dataSource.setDriverClass(driverClass);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmbeddedValueResolver</span><span class="params">(StringValueResolver resolver)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.valueResolver = resolver;</span><br><span class="line">        driverClass = valueResolver.resolveStringValue(<span class="string">&quot;$&#123;db.driver&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120132230546.png" alt="image-20230120132230546"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120132041360.png" alt="image-20230120132041360"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120132127071.png" alt="image-20230120132127071"></p><blockquote><p>第二种切换环境</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120133720473.png" alt="image-20230120133720473"></p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="aop功能测试"><a href="#aop功能测试" class="headerlink" title="aop功能测试"></a>aop功能测试</h3><blockquote><p>目标类和切面类</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathCalculate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是目标方法--calculate--&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a/b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">###############################################</span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//告诉spring容器这是一个 切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetAspects</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.miao.aop.MathCalculate.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Before(&quot;print()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">targetStart</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;返回的方法名：&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;--@before--开始之前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;print()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">targetEnd</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;返回的方法名：&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;--@after--运算结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;print()&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">targetReturn</span><span class="params">(JoinPoint joinPoint,Object result)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;返回的方法名：&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;--@afterreturning--正常结束&quot;</span>+<span class="string">&quot;返回值：&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;print()&quot;,throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">targetThrows</span><span class="params">(JoinPoint joinPoint,Exception exception)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;返回的方法名：&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;--@afterthrowing--出现异常了&quot;</span>+<span class="string">&quot;出现的异常信息：&quot;</span>+exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置类</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AOP: 在程序运行期间动态的将某段代码切入到指定位置进行运行的编程方式</span></span><br><span class="line"><span class="comment"> * 将业务逻辑组件和切面类都加入到容器中，并告诉spring哪个是切面类（添加<span class="doctag">@Aspect</span>）</span></span><br><span class="line"><span class="comment"> * 在切面类上添加通知注解</span></span><br><span class="line"><span class="comment"> * 开启基于注解的aop模式：<span class="doctag">@EnableAspectJAutoProxy</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">//开启基于注解的aop模式</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfigAop</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MathCalculate <span class="title function_">mathCalculate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MathCalculate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TargetAspects <span class="title function_">targetAspects</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TargetAspects</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试结果</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120144649916.png" alt="image-20230120144649916"></p><blockquote><p>测试异常</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120144732919.png" alt="image-20230120144732919"></p><h2 id="JdbcTemplate–操作事务"><a href="#JdbcTemplate–操作事务" class="headerlink" title="JdbcTemplate–操作事务"></a>JdbcTemplate–操作事务</h2><blockquote><p>配置类</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声明式事务</span></span><br><span class="line"><span class="comment"> * 相关依赖：数据源，数据库驱动，spring-jdbc</span></span><br><span class="line"><span class="comment"> * 给方法上添加<span class="doctag">@Transactional</span> 表示当前方法是一个 事务方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableTransactionManagement</span>  开启基于注解的事务管理功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 配置事务管理器控制事务 PlatformTransactionManager</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.miao.tx&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据源</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">        dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/school&quot;</span>);</span><br><span class="line">        dataSource.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">platformTransactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>实体类</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120173213763.png" alt="image-20230120173213763"></p><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120173252128.png" alt="image-20230120173252128"></p><blockquote><p>结果</p></blockquote><p><img src="/2023/01/19/spring-%E5%86%8D%E7%90%86%E8%A7%A3-study/image-20230120173404639.png" alt="image-20230120173404639"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring-mvc-study</title>
      <link href="/2023/01/13/Spring-mvc-study/"/>
      <url>/2023/01/13/Spring-mvc-study/</url>
      
        <content type="html"><![CDATA[<h2 id="springmvc-首页访问"><a href="#springmvc-首页访问" class="headerlink" title="springmvc-首页访问"></a>springmvc-首页访问</h2><blockquote><p>jar包依赖</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.3</span><span class="number">.16</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.2</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;thymeleaf-spring5&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">3.0</span><span class="number">.12</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>web.xml</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--    配置springmvc前端控制器，对浏览器发送的请求统一处理--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvcdemo&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;!--        配置springmvc的配置文件的 位置 和 名称--&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">&lt;!--       将前端控制器dispatcherServlet的初始化时间 提前到 服务器 启动时--&gt;</span><br><span class="line">        &lt;load-on-startup&gt;<span class="number">1</span>&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvcdemo&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><blockquote><p>springMVC.xml配置</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--    配置组件扫描--&gt;</span><br><span class="line">  &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.miao.controller&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置Thymeleaf视图解析器 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;viewResolver&quot;</span> class=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br><span class="line">&lt;!--        优先级--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;order&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;characterEncoding&quot;</span> value=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;templateEngine&quot;</span>&gt;</span><br><span class="line">            &lt;bean class=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;templateResolver&quot;</span>&gt;</span><br><span class="line">                    &lt;bean class=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;!-- 视图前缀 --&gt;</span><br><span class="line">                        &lt;property name=<span class="string">&quot;prefix&quot;</span> value=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;!-- 视图后缀 --&gt;</span><br><span class="line">                        &lt;property name=<span class="string">&quot;suffix&quot;</span> value=<span class="string">&quot;.html&quot;</span>/&gt;</span><br><span class="line">                        &lt;property name=<span class="string">&quot;templateMode&quot;</span> value=<span class="string">&quot;HTML5&quot;</span>/&gt;</span><br><span class="line">                        &lt;property name=<span class="string">&quot;characterEncoding&quot;</span> value=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line">                    &lt;/bean&gt;</span><br><span class="line">                &lt;/property&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/13/Spring-mvc-study/image-20230113224159435.png" alt="image-20230113224159435"></p><blockquote><p>访问页面</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230113224300540.png" alt="image-20230113224300540"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230113224345859.png" alt="image-20230113224345859"></p><blockquote><p>web.xml</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230113234030012.png" alt="image-20230113234030012"></p><blockquote><p>webapp</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230113234217084.png" alt="image-20230113234217084"></p><h3 id="requestmapping-value"><a href="#requestmapping-value" class="headerlink" title="@requestmapping-value"></a>@requestmapping-value</h3><blockquote><p>alt + 7 查看 structure</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230113233341039.png" alt="image-20230113233341039"></p><blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AliasFor(&quot;path&quot;)</span></span><br><span class="line">String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>可以多个地址访问同一个页面</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230113233533511.png" alt="image-20230113233533511"></p><h3 id="requestmapping-method"><a href="#requestmapping-method" class="headerlink" title="@requestmapping-method"></a>@requestmapping-method</h3><p><img src="/2023/01/13/Spring-mvc-study/image-20230114211252444.png" alt="image-20230114211252444"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230114211337442.png" alt="image-20230114211337442"></p><blockquote><p>多个请求方法方式</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230114211426381.png" alt="image-20230114211426381"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230114211442497.png" alt="image-20230114211442497"></p><h3 id="requestmapping-params"><a href="#requestmapping-params" class="headerlink" title="@requestmapping-params"></a>@requestmapping-params</h3><blockquote><p>请求路径携带参数</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230114214056770.png" alt="image-20230114214056770"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230114214151474.png" alt="image-20230114214151474"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230114214215905.png" alt="image-20230114214215905"></p><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h3><p><img src="/2023/01/13/Spring-mvc-study/image-20230114221014721.png" alt="image-20230114221014721"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230114221130138.png" alt="image-20230114221130138"></p><h3 id="原生servletapi-调用"><a href="#原生servletapi-调用" class="headerlink" title="原生servletapi 调用"></a>原生servletapi 调用</h3><p><img src="/2023/01/13/Spring-mvc-study/image-20230114223528458.png" alt="image-20230114223528458"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230114223543121.png" alt="image-20230114223543121"></p><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><p><img src="/2023/01/13/Spring-mvc-study/image-20230114231224995.png" alt="image-20230114231224995"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230114231444986.png" alt="image-20230114231444986"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230114231510258.png" alt="image-20230114231510258"></p><blockquote><p>结果</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230114231728626.png" alt="image-20230114231728626"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230114231746593.png" alt="image-20230114231746593"></p><h2 id="域对象共享数据"><a href="#域对象共享数据" class="headerlink" title="域对象共享数据"></a>域对象共享数据</h2><h3 id="servletAPI共享数据"><a href="#servletAPI共享数据" class="headerlink" title="servletAPI共享数据"></a>servletAPI共享数据</h3><p><img src="/2023/01/13/Spring-mvc-study/image-20230115222655501.png" alt="image-20230115222655501"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230115222728473.png" alt="image-20230115222728473"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230115222749336.png" alt="image-20230115222749336"></p><h3 id="modelandview共享数据"><a href="#modelandview共享数据" class="headerlink" title="modelandview共享数据"></a>modelandview共享数据</h3><p><img src="/2023/01/13/Spring-mvc-study/image-20230115224038290.png" alt="image-20230115224038290"></p><blockquote><p>model</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230115224548448.png" alt="image-20230115224548448"></p><blockquote><p>map</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230115224926312.png" alt="image-20230115224926312"></p><blockquote><p>modelmap</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230115225231065.png" alt="image-20230115225231065"></p><blockquote><p>model–modelmap–map关系</p></blockquote><blockquote><p>modelmap</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230115230257361.png" alt="image-20230115230257361"></p><blockquote><p>model</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230115230334369.png" alt="image-20230115230334369"></p><blockquote><p>map</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230115230507698.png" alt="image-20230115230507698"></p><blockquote><p>实现</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230115230707024.png" alt="image-20230115230707024"></p><h3 id="dispatcherServlet流程"><a href="#dispatcherServlet流程" class="headerlink" title="dispatcherServlet流程"></a>dispatcherServlet流程</h3><p><img src="/2023/01/13/Spring-mvc-study/image-20230116212849754.png" alt="image-20230116212849754"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230116213018836.png" alt="image-20230116213018836"></p><blockquote><p>对应</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230116213123787.png" alt="image-20230116213123787"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230116213152130.png" alt="image-20230116213152130"></p><h2 id="springMVC的视图"><a href="#springMVC的视图" class="headerlink" title="springMVC的视图"></a>springMVC的视图</h2><blockquote><p>thymeleaf解析器</p><p>dispatcherservlet–processdispatchresult–render</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230116222735554.png" alt="image-20230116222735554"></p><h3 id="forward转发–地址不变"><a href="#forward转发–地址不变" class="headerlink" title="forward转发–地址不变"></a>forward转发–地址不变</h3><blockquote><p>执行</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230116230641339.png" alt="image-20230116230641339"></p><blockquote><p>第一次请求</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230116230546898.png" alt="image-20230116230546898"></p><blockquote><p>第二次请求</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230116230724865.png" alt="image-20230116230724865"></p><h3 id="redirect重定向–两次请求"><a href="#redirect重定向–两次请求" class="headerlink" title="redirect重定向–两次请求"></a>redirect重定向–两次请求</h3><p><img src="/2023/01/13/Spring-mvc-study/image-20230117191558260.png" alt="image-20230117191558260"></p><h3 id="view-controller"><a href="#view-controller" class="headerlink" title="view-controller"></a>view-controller</h3><blockquote><p>mvc中用来制定首页</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--    path:设置处理的 请求地址，view-name:请求地址对应的视图名称--&gt;</span><br><span class="line">    &lt;mvc:view-controller path=<span class="string">&quot;/&quot;</span> view-name=<span class="string">&quot;index&quot;</span>&gt;&lt;/mvc:view-controller&gt;</span><br><span class="line">&lt;!--    开启注解驱动--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven/&gt;</span><br></pre></td></tr></table></figure><h3 id="restful中的请求方式"><a href="#restful中的请求方式" class="headerlink" title="restful中的请求方式"></a>restful中的请求方式</h3><p><img src="/2023/01/13/Spring-mvc-study/image-20230118105838378.png" alt="image-20230118105838378"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230118105900436.png" alt="image-20230118105900436"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230118111026373.png" alt="image-20230118111026373"></p><h3 id="开放对静态资源的访问"><a href="#开放对静态资源的访问" class="headerlink" title="开放对静态资源的访问"></a>开放对静态资源的访问</h3><blockquote><p>对静态资源的访问</p><p>先是dispatcherservlet寻找–若找不到，交给默认的defaultservlet找</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230118120719630.png" alt="image-20230118120719630"></p><h3 id="httpMessageConverter–报文信息转换"><a href="#httpMessageConverter–报文信息转换" class="headerlink" title="httpMessageConverter–报文信息转换"></a>httpMessageConverter–报文信息转换</h3><blockquote><p>提供了两个注解和类型</p><ul><li>@requestbody———requestentity</li><li>@responsebody———–responseentity</li></ul></blockquote><blockquote><p>将请求报文转换为java对象</p><p>将java对象转换为响应报文</p></blockquote><h3 id="responsebody"><a href="#responsebody" class="headerlink" title="@responsebody"></a>@responsebody</h3><blockquote><p>不走视图，返回字符-succes-</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230118151750870.png" alt="image-20230118151750870"></p><blockquote><p>json–返回对象</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230118153859957.png" alt="image-20230118153859957"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230118153912516.png" alt="image-20230118153912516"> </p><h3 id="拦截器的配置"><a href="#拦截器的配置" class="headerlink" title="拦截器的配置"></a>拦截器的配置</h3><blockquote><p>springMVC中的拦截器用于dispatcherservlet</p><ul><li>prehandle:控制器方法执行之前执行，返回类型boolean，返回true放行，false表示拦截</li><li>posthandle：控制器方法执行之后执行</li><li>aftercomplation:处理完视图和模型视图，渲染视图后执行</li></ul></blockquote><blockquote><p>拦截器配置</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置拦截器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;prehandler&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> HandlerInterceptor.<span class="built_in">super</span>.preHandle(request, response, handler);</span><br><span class="line"><span class="comment">//        return false;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle&quot;</span>);</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion&quot;</span>);</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;。。。。&#125;</span><br></pre></td></tr></table></figure><blockquote><p>springmvc.xml配置</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--    配置拦截器_三种方式--&gt;</span><br><span class="line">    &lt;mvc:interceptors&gt;</span><br><span class="line">&lt;!--        &lt;bean class=<span class="string">&quot;com.miao.controller.interceptor.FirstInterceptor&quot;</span>&gt;&lt;/bean&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;ref bean=<span class="string">&quot;firstInterceptor&quot;</span>&gt;&lt;/ref&gt;--&gt;</span><br><span class="line">        &lt;mvc:interceptor&gt;</span><br><span class="line">            &lt;mvc:mapping path=<span class="string">&quot;/**&quot;</span>/&gt;</span><br><span class="line">            &lt;mvc:exclude-mapping path=<span class="string">&quot;/&quot;</span>/&gt;</span><br><span class="line">            &lt;ref bean=<span class="string">&quot;firstInterceptor&quot;</span>&gt;&lt;/ref&gt;</span><br><span class="line">        &lt;/mvc:interceptor&gt;</span><br><span class="line">    &lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><h3 id="三个拦截方法"><a href="#三个拦截方法" class="headerlink" title="三个拦截方法"></a>三个拦截方法</h3><p><img src="/2023/01/13/Spring-mvc-study/image-20230118220905447.png" alt="image-20230118220905447"></p><blockquote><p>prehandle</p><p>控制器之前执行–按照遍历的顺序</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230118220321525.png" alt="image-20230118220321525"></p><blockquote><p>posthandle</p><p>控制器之后执行–遍历–倒叙执行</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230118220550056.png" alt="image-20230118220550056"></p><blockquote><p>aftercomplation</p><p>渲染视图之后执行–遍历–倒叙执行</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230118221018752.png" alt="image-20230118221018752"></p><h3 id="基于配置异常处理"><a href="#基于配置异常处理" class="headerlink" title="基于配置异常处理"></a>基于配置异常处理</h3><blockquote><p>显示结果</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230118224005803.png" alt="image-20230118224005803"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230118224039715.png" alt="image-20230118224039715"></p><blockquote><p>xml中配置</p></blockquote><p><img src="/2023/01/13/Spring-mvc-study/image-20230118224126916.png" alt="image-20230118224126916"></p><h3 id="基于注解配置异常处理"><a href="#基于注解配置异常处理" class="headerlink" title="基于注解配置异常处理"></a>基于注解配置异常处理</h3><p><img src="/2023/01/13/Spring-mvc-study/image-20230118225054965.png" alt="image-20230118225054965"></p><p><img src="/2023/01/13/Spring-mvc-study/image-20230118225108188.png" alt="image-20230118225108188"></p><h2 id="注解配置springmvc"><a href="#注解配置springmvc" class="headerlink" title="注解配置springmvc"></a>注解配置springmvc</h2><blockquote><p>用于替换springmvc.xml</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件扫描  thymeleaf视图解析器  首页跳转view-controller  静态资源访问default-servlet-handler</span></span><br><span class="line"><span class="comment"> * 注解驱动annotation-driven  SimpleMappingExceptionResolver异常处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//标识为配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//开启组件扫描</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.miao.mvc&quot;)</span></span><br><span class="line"><span class="comment">//开区注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Webconfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//替换springmvc.xml中的视图解析</span></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">contextTemplateResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">contextTemplateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(</span><br><span class="line">                webApplicationContext.getServletContext()</span><br><span class="line">        );</span><br><span class="line">        contextTemplateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        contextTemplateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        contextTemplateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        contextTemplateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> contextTemplateResolver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成模板引擎 并为 模板引擎 注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver contextTemplateResolver)</span>&#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(contextTemplateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成视图解析器 并为 解析器注入 模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span>&#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态资源访问default-servlet-handler</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置拦截器 /*:拦截一层  /**：拦截所有层</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">TestInterceptor</span> <span class="variable">testInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(testInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/hello&quot;</span>).setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//文件上传</span></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public MultipartResolver multipartResolver()&#123;</span></span><br><span class="line"><span class="comment">//        CommonsMultipartResolver commonsMultipartResolver = new CommonsMultipartResolver();</span></span><br><span class="line"><span class="comment">//        return commonsMultipartResolver;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//异常处理java.lang.ArithmeticException</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> &#123;</span><br><span class="line">        <span class="type">SimpleMappingExceptionResolver</span> <span class="variable">simpleMappingExceptionResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMappingExceptionResolver</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;java.lang.ArithmeticException&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        simpleMappingExceptionResolver.setExceptionMappings(properties);</span><br><span class="line">        simpleMappingExceptionResolver.setExceptionAttribute(<span class="string">&quot;ex&quot;</span>);</span><br><span class="line">        resolvers.add(simpleMappingExceptionResolver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>用来替代web.xml</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//web工程的初始化，用来代替web.xml</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//spring的配置类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//springmvc 的配置类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Webconfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dispatcherservlet的映射规则 url-pattern</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置过滤器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">encodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceResponseEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">methodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;encodingFilter,methodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dispatcherservlet–关系"><a href="#dispatcherservlet–关系" class="headerlink" title="dispatcherservlet–关系"></a>dispatcherservlet–关系</h3><p><img src="/2023/01/13/Spring-mvc-study/image-20230119140850907.png" alt="image-20230119140850907"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Study</title>
      <link href="/2023/01/08/Spring-Study/"/>
      <url>/2023/01/08/Spring-Study/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring5-基础学习"><a href="#Spring5-基础学习" class="headerlink" title="Spring5 基础学习"></a>Spring5 基础学习</h1><blockquote><p>下载Spring5</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230108191324198.png" alt="image-20230108191324198"></p><blockquote><p>下载地址：<a href="https://repo.spring.io/ui/native/release/org/springframework/spring/">https://repo.spring.io/ui/native/release/org/springframework/spring/</a></p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230108191604542.png" alt="image-20230108191604542"></p><blockquote><p>简单测试</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230108213301319.png" alt="image-20230108213301319"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">############################################</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    配置user对象创建--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;user&quot;</span> class=<span class="string">&quot;com.miao.testspring5.User&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line">#################################################</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpring5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//加载spring配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取配置创建的对象</span></span><br><span class="line">        User user=context.getBean(<span class="string">&quot;user&quot;</span>,User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h2><h3 id="IOC底层原理"><a href="#IOC底层原理" class="headerlink" title="IOC底层原理"></a>IOC底层原理</h3><blockquote><p>IOC概念</p></blockquote><blockquote><ol><li>控制反转，把对象创建和对象之间的调用过程，交给spring管理</li><li>使用IOC目的：为了降低耦合度</li></ol></blockquote><blockquote><p>IOC底层原理</p><p>xml解析、工厂模式、反射</p><p>简单图解</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230108220640287.png" alt="image-20230108220640287"></p><h3 id="IOC接口-BeanFactory"><a href="#IOC接口-BeanFactory" class="headerlink" title="IOC接口(BeanFactory)"></a>IOC接口(BeanFactory)</h3><blockquote><p>IOC容器底层是 对象工厂</p></blockquote><blockquote><p>Spring 提供IOC容器实现的两种方式：（接口）</p><ol><li><p>BeanFactory:IOC容器基本实现，是spring内部的使用接口</p><p><strong>加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象</strong></p></li><li><p>ApplicationContext:BeanFactory接口的子接口，功能更强大</p><p><strong>加载配置文件时候就会将配置文件中的对象进行创建</strong></p></li><li><p>ApplicationContext:两个实现类</p></li></ol></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230108222440216.png" alt="image-20230108222440216"></p><h3 id="IOC操作Bean管理-基于xml"><a href="#IOC操作Bean管理-基于xml" class="headerlink" title="IOC操作Bean管理(基于xml)"></a>IOC操作Bean管理(基于xml)</h3><blockquote><p>基于xml方式创建对象</p></blockquote><blockquote><!--    配置user对象创建--><p><bean id="user" class="com.miao.testspring5.User"></bean></p><ol><li><p>在spring配置文件中，使用bean标签，标签里面添加对应属性，</p><p>就可以实现对象创建。</p></li><li><p>在bean标签中有很多属性，常用属性：</p><ul><li>id属性：唯一标识</li><li>class属性：类全路径（包类路径）</li></ul></li><li><p>创建对象的时候，默认执行无参数构造方法完成对象创建</p></li></ol></blockquote><blockquote><p>基于xml方式注入属性</p></blockquote><blockquote><ol><li>DI:依赖注入，注入属性<ul><li>方式一：使用set方法注入</li><li>方式二：使用有参构造注入</li></ul></li></ol></blockquote><h4 id="使用set方法注入属性"><a href="#使用set方法注入属性" class="headerlink" title="使用set方法注入属性"></a>使用set方法注入属性</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用set方法注入属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="comment">//创建属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="comment">//创建属性对应的set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(String author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">###########################################</span><br><span class="line"># bean.xml中</span><br><span class="line">    &lt;!--    set方法注入属性--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;book&quot;</span> class=<span class="string">&quot;com.miao.testspring5.Book&quot;</span>&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        name:类里面属性名称</span><br><span class="line">        value：向属性注入值</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;葵花宝典&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;author&quot;</span> value=<span class="string">&quot;东方不服&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">###############################################</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBook</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//加载spring配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取配置创建的对象</span></span><br><span class="line">        Book book=context.getBean(<span class="string">&quot;book&quot;</span>,Book.class);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">        book.testDemo();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="使用有参构造注入属性"><a href="#使用有参构造注入属性" class="headerlink" title="使用有参构造注入属性"></a>使用有参构造注入属性</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">(String name, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;---------&quot;</span>+address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">##########################################</span><br><span class="line">&lt;!--    配置order对象有参构造注入属性--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;order&quot;</span> class=<span class="string">&quot;com.miao.testspring5.Order&quot;</span>&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;马桶&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">&quot;address&quot;</span> value=<span class="string">&quot;made in china&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    ###########################################</span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//加载spring配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取配置创建的对象</span></span><br><span class="line">        Order order=context.getBean(<span class="string">&quot;order&quot;</span>,Order.class);</span><br><span class="line">        System.out.println(order);</span><br><span class="line">        order.testDemo();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="P标签-set注入属性-了解"><a href="#P标签-set注入属性-了解" class="headerlink" title="P标签  set注入属性(了解)"></a>P标签  set注入属性(了解)</h4><p><img src="/2023/01/08/Spring-Study/image-20230109192051028.png" alt="image-20230109192051028"><img src="/2023/01/08/Spring-Study/image-20230109192122679.png" alt="image-20230109192122679"></p><h4 id="注入其它类型属性"><a href="#注入其它类型属性" class="headerlink" title="注入其它类型属性"></a>注入其它类型属性</h4><blockquote><p>null值</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--注入空值--&gt;</span><br><span class="line">        &lt;bean id=<span class="string">&quot;book&quot;</span> class=<span class="string">&quot;com.miao.testspring5.Book&quot;</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;葵花宝典&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;author&quot;</span> value=<span class="string">&quot;东方不服&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;address&quot;</span>&gt;</span><br><span class="line">                &lt;<span class="literal">null</span>&gt;&lt;/<span class="literal">null</span>&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br></pre></td></tr></table></figure><blockquote><p>属性值包含特殊符号</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">属性值包含特殊含义</span><br><span class="line"><span class="number">1.</span>把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span><br><span class="line"><span class="number">2.</span>特殊内容写到 CDATA中</span><br><span class="line">--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;book&quot;</span> class=<span class="string">&quot;com.miao.testspring5.Book&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;葵花宝典&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;author&quot;</span> value=<span class="string">&quot;东方不服&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;address&quot;</span>&gt;</span><br><span class="line">            &lt;value&gt; &lt;![CDATA[</span><br><span class="line">            &lt;&lt;中国的宝贝&gt;&gt;</span><br><span class="line">            ]]&gt; &lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="注册属性-外部bean"><a href="#注册属性-外部bean" class="headerlink" title="注册属性-外部bean"></a>注册属性-外部bean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--    配置UserService和UserDao对象创建--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userService&quot;</span> class=<span class="string">&quot;com.miao.inner.service.UserService&quot;</span>&gt;</span><br><span class="line">&lt;!--        name属性：类 里面的属性名称</span><br><span class="line">            ref属性：创建UserDao对象 bean标签 id值--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;userDao&quot;</span> ref=<span class="string">&quot;userDao&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userDao&quot;</span> class=<span class="string">&quot;com.miao.inner.dao.UserDaoImpl&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">    #######################################</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service  add ----------&quot;</span>);</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">##################################################</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line">###################################################</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao update -------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">######################################################</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//加载spring配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean2.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取配置创建的对象</span></span><br><span class="line">        UserService userService=context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        System.out.println(userService);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="注入属性-内部bean和级联关系"><a href="#注入属性-内部bean和级联关系" class="headerlink" title="注入属性-内部bean和级联关系"></a>注入属性-内部bean和级联关系</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//加载spring配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean3.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取配置创建的对象</span></span><br><span class="line">        Emp emp=context.getBean(<span class="string">&quot;emp&quot;</span>, Emp.class);</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">        emp.add();</span><br><span class="line">    &#125;</span><br><span class="line">    ###############################</span><br><span class="line">    <span class="comment">//部门类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDname</span><span class="params">(String dname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我的部门是&quot;</span>+dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#######################################</span><br><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String egender;</span><br><span class="line">    <span class="comment">//员工属于某一个部门</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEname</span><span class="params">(String ename)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEgender</span><span class="params">(String egender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.egender = egender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(ename+<span class="string">&quot;--&quot;</span>+egender+<span class="string">&quot;--&quot;</span>+dept);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#########################################</span><br><span class="line">&lt;!--    配置Dept部门和 Emp员工对象创建--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    内部bean--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;emp&quot;</span> class=<span class="string">&quot;com.miao.bean.Emp&quot;</span>&gt;</span><br><span class="line">&lt;!--    对象属性--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;dept&quot;</span> &gt;</span><br><span class="line">        &lt;bean id=<span class="string">&quot;dept&quot;</span> class=<span class="string">&quot;com.miao.bean.Dept&quot;</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;dname&quot;</span> value=<span class="string">&quot;销售&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;!--    普通属性--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;ename&quot;</span> value=<span class="string">&quot;张三&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;egender&quot;</span> value=<span class="string">&quot;nan&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="注入属性-级联"><a href="#注入属性-级联" class="headerlink" title="注入属性-级联"></a>注入属性-级联</h4><p><img src="/2023/01/08/Spring-Study/image-20230109223655471.png" alt="image-20230109223655471"></p><p><img src="/2023/01/08/Spring-Study/image-20230109223723506.png" alt="image-20230109223723506"></p><h4 id="注入属性-数组类型-集合类型"><a href="#注入属性-数组类型-集合类型" class="headerlink" title="注入属性-数组类型-集合类型"></a>注入属性-数组类型-集合类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//属性注入 数组 集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="comment">//数组属性注入</span></span><br><span class="line">    <span class="keyword">private</span> String[] cources;</span><br><span class="line">    <span class="comment">//list属性注入</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="comment">//map属性注入</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line">    <span class="comment">//set属性注入</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCources</span><span class="params">(String[] cources)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cources = cources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSet</span><span class="params">(Set&lt;String&gt; set)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.set = set;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(cources));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(maps);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#######################################################</span><br><span class="line">&lt;!--对象注入--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;stu&quot;</span> class=<span class="string">&quot;com.miao.collection.Stu&quot;</span>&gt;</span><br><span class="line">&lt;!--        数组属性注入--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;cources&quot;</span>&gt;</span><br><span class="line">            &lt;array&gt;</span><br><span class="line">                &lt;value&gt;java&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;nodejs&lt;/value&gt;</span><br><span class="line">            &lt;/array&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;!--        集合属性注入--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;html&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;javascript&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;set&quot;</span>&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;value&gt;vue&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;vue3<span class="number">.0</span>&lt;/value&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maps&quot;</span>&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key=<span class="string">&quot;Hexo&quot;</span> value=<span class="string">&quot;hexo&quot;</span>&gt;&lt;/entry&gt;</span><br><span class="line">                &lt;entry key=<span class="string">&quot;Php&quot;</span> value=<span class="string">&quot;php&quot;</span>&gt;&lt;/entry&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    #####################################################</span><br></pre></td></tr></table></figure><h4 id="注入对象属性-在集合中"><a href="#注入对象属性-在集合中" class="headerlink" title="注入对象属性 在集合中"></a>注入对象属性 在集合中</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--对象注入--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;stu&quot;</span> class=<span class="string">&quot;com.miao.collection.Stu&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;courseList&quot;</span>&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;ref bean=<span class="string">&quot;course&quot;</span>&gt;&lt;/ref&gt;</span><br><span class="line">                &lt;ref bean=<span class="string">&quot;course1&quot;</span>&gt;&lt;/ref&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;course&quot;</span> class=<span class="string">&quot;com.miao.collection.Course&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;cname&quot;</span> value=<span class="string">&quot;剑术&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;course1&quot;</span> class=<span class="string">&quot;com.miao.collection.Course&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;cname&quot;</span> value=<span class="string">&quot;太极&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> ########################################</span><br><span class="line">        <span class="comment">//course对象属性注入</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; courseList;</span><br><span class="line">    <span class="comment">//set方法注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCourseList</span><span class="params">(List&lt;Course&gt; courseList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.courseList = courseList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="集合注入部分提取"><a href="#集合注入部分提取" class="headerlink" title="集合注入部分提取"></a>集合注入部分提取</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;书籍是：&quot;</span>+list+<span class="string">&quot;\t\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">##############################################</span><br><span class="line">&lt;util:list id=<span class="string">&quot;booklist&quot;</span>&gt;</span><br><span class="line">    &lt;value&gt;小王子&lt;/value&gt;</span><br><span class="line">    &lt;value&gt;中王子&lt;/value&gt;</span><br><span class="line">    &lt;value&gt;大王子&lt;/value&gt;</span><br><span class="line">&lt;/util:list&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;book&quot;</span> class=<span class="string">&quot;com.miao.collection.Book&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;list&quot;</span> ref=<span class="string">&quot;booklist&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    ######################################</span><br></pre></td></tr></table></figure><blockquote><p>需要改的地方（提取注入部分）</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230110192645094.png" alt="image-20230110192645094"></p><h4 id="IOC操作bean管理-FactoryBean"><a href="#IOC操作bean管理-FactoryBean" class="headerlink" title="IOC操作bean管理(FactoryBean)"></a>IOC操作bean管理(FactoryBean)</h4><blockquote><p>spring有两种类型bean，普通bean，工厂bean（factorybean）</p></blockquote><blockquote><p>普通bean：在配置文件中定义bean类型就是返回类型</p></blockquote><blockquote><p>工厂bean：在配置文件中定义bean类型可以和返回类型不一样</p><ul><li>创建类，实现接口factorybean</li><li>实现接口里面的方法，在方法中定义返回的bean类型</li></ul></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FacBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Course&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Course <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">        course.setCname(<span class="string">&quot;缘起，人群中看见你&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FactoryBean.<span class="built_in">super</span>.isSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">################################################</span><br><span class="line">&lt;!--    配置FacBean对象--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;facBean&quot;</span> class=<span class="string">&quot;com.miao.factorybean.FacBean&quot;</span>&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">################################################</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFacBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//加载spring配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;facbean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取配置创建的对象</span></span><br><span class="line">        Course course=context.getBean(<span class="string">&quot;facBean&quot;</span>, Course.class);</span><br><span class="line">        System.out.println(course);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="IOC操作Bean管理-bean作用域"><a href="#IOC操作Bean管理-bean作用域" class="headerlink" title="IOC操作Bean管理-bean作用域"></a>IOC操作Bean管理-bean作用域</h4><blockquote><p>在spring中，默认情况下，bean是单例对象</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230110213034805.png" alt="image-20230110213034805"></p><p><img src="/2023/01/08/Spring-Study/image-20230110213118399.png" alt="image-20230110213118399"></p><p><img src="/2023/01/08/Spring-Study/image-20230110213154895.png" alt="image-20230110213154895"></p><blockquote><p>设置单实例和多实例</p><ul><li>spring配置文件bean标签里面属性（scope）<ol><li>singleton:单实例对象</li><li>prototype：多实例对象</li></ol></li></ul></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230110213703521.png" alt="image-20230110213703521"></p><p><img src="/2023/01/08/Spring-Study/image-20230110213728456.png" alt="image-20230110213728456"></p><blockquote><p>singleton和prototype的区别</p><ul><li>singleton时：加载spring配置文件时就会创建单实例对象</li><li>prototype时：不会在加载spring配置文件时创建对象，在调用getbean方法 时创建多实例对象</li></ul></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230110214347024.png" alt="image-20230110214347024"></p><h4 id="IOC操作Bean管理-bean生命周期"><a href="#IOC操作Bean管理-bean生命周期" class="headerlink" title="IOC操作Bean管理-bean生命周期"></a>IOC操作Bean管理-bean生命周期</h4><blockquote><p>生命周期：</p><ul><li>对象创建到对象销毁的过程</li></ul><p>bean生命周期</p><ol><li>通过构造器创建bean实例（无参构造）</li><li>为bean的属性设置值和对其他bean的引用（调用set方法）</li><li>调用bean的初始化方法（需要配置初始化方法）</li><li>bean可以使用了（对象获取了）</li><li>容器关闭时候，调用bean的销毁方法（配置销毁的方法）</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.miao.bean;</span><br><span class="line"></span><br><span class="line">public class Order &#123;</span><br><span class="line">    private String oname;</span><br><span class="line"></span><br><span class="line">    public Order() &#123;</span><br><span class="line">        System.out.println(&quot;第一步，调用无参方法创建对象&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOname(String oname) &#123;</span><br><span class="line">        this.oname = oname;</span><br><span class="line">        System.out.println(&quot;第二步，set方法属性注入&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void initMethod()&#123;</span><br><span class="line">        System.out.println(&quot;第三步，调用bean的初始化方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void destoryMethod()&#123;</span><br><span class="line">        System.out.println(&quot;第五步，调用bean的销毁方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#########################################</span><br><span class="line">&lt;!--    bean 的生命周期--&gt;</span><br><span class="line">&lt;bean id=&quot;order&quot; class=&quot;com.miao.bean.Order&quot; init-method=&quot;initMethod&quot; destroy-method=&quot;destoryMethod&quot;&gt;</span><br><span class="line">   &lt;property name=&quot;oname&quot; value=&quot;bean生命周期&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">#############################################</span><br><span class="line">    @Test</span><br><span class="line">    public void testBean1()&#123;</span><br><span class="line">        //加载spring配置文件</span><br><span class="line">//        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean4.xml&quot;);</span><br><span class="line">        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean4.xml&quot;);</span><br><span class="line">        //获取配置创建的对象</span><br><span class="line">        Order order=context.getBean(&quot;order&quot;, Order.class);</span><br><span class="line">        System.out.println(&quot;第四步，获取创建bean的实例对象&quot;);</span><br><span class="line">        System.out.println(order);</span><br><span class="line">        //主动销毁</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>bean的后置处理器</p><ol><li>通过构造器创建bean实例（无参构造）</li><li>为bean的属性设置值和对其他bean的引用（调用set方法）</li><li><strong>把bean实例传递bean后置处理器方法</strong>(postProcessBeforeInitialization)</li><li>调用bean的初始化方法（需要配置初始化方法）</li><li><strong>把bean实例传递bean后置处理器方法</strong>(postProcessAfterInitialization)</li><li>bean可以使用了（对象获取了）</li><li>容器关闭时候，调用bean的销毁方法（配置销毁的方法）</li></ol></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230110223125977.png" alt="image-20230110223125977"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyBeanPost implements BeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;初始化之前执行&quot;);</span><br><span class="line"></span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;初始化之后执行&quot;);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">##############################################</span><br><span class="line">&lt;!--    bean 的生命周期--&gt;</span><br><span class="line">&lt;bean id=&quot;order&quot; class=&quot;com.miao.bean.Order&quot; init-method=&quot;initMethod&quot; destroy-method=&quot;destoryMethod&quot;&gt;</span><br><span class="line">   &lt;property name=&quot;oname&quot; value=&quot;bean生命周期&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!--   配置bean后置处理器--&gt;</span><br><span class="line">   &lt;bean id=&quot;myBeanPost&quot; class=&quot;com.miao.bean.MyBeanPost&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="IOC操作Bean管理-基于注解"><a href="#IOC操作Bean管理-基于注解" class="headerlink" title="IOC操作Bean管理(基于注解)"></a>IOC操作Bean管理(基于注解)</h3><h4 id="IOC操作Bean管理-xml自动装配"><a href="#IOC操作Bean管理-xml自动装配" class="headerlink" title="IOC操作Bean管理-xml自动装配"></a>IOC操作Bean管理-xml自动装配</h4><blockquote><p>自动装配：</p><p>根据装配规则（属性名称或者属性类型），spring自动匹配属性值进行注入</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--实现自动装配</span><br><span class="line">        bean标签属性，实现自动装配</span><br><span class="line">        autowire常用俩个值</span><br><span class="line">                byName:根据属性名称注入，注入bean的id值和类属性名称一样</span><br><span class="line">                byType:根据类型注入</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;emp&quot;</span> class=<span class="string">&quot;com.miao.autowire.Emp&quot;</span> autowire=<span class="string">&quot;byName&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;dept&quot;</span> class=<span class="string">&quot;com.miao.autowire.Dept&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">################################################</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;dept=&quot;</span> + dept +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自动装配属性&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">####################################################</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">######################################################</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAutowire</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//加载spring配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;autowire.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取配置创建的对象</span></span><br><span class="line">        Emp emp=context.getBean(<span class="string">&quot;emp&quot;</span>, Emp.class);</span><br><span class="line">        System.out.println(emp.toString());</span><br><span class="line">        emp.test();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="IOC操作Bean管理-引入外部文件"><a href="#IOC操作Bean管理-引入外部文件" class="headerlink" title="IOC操作Bean管理-引入外部文件"></a>IOC操作Bean管理-引入外部文件</h4><blockquote><p>直接配置数据库信息</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--    直接配置 数据源--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;dataSource&quot;</span> class=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;com.mysql.cj.jdbc.driver&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql://localhost:3306/school&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;root&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;123456&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><blockquote><p>引入外部属性文件配置数据源连接池</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230111192106190.png" alt="image-20230111192106190"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--    引入外部属性文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder location=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><span class="line">&lt;!--    配置连接池--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dataSource&quot;</span> class=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;$&#123;driverClass&#125;&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;username&#125;&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="IOC操作Bean管理-基于注解-1"><a href="#IOC操作Bean管理-基于注解-1" class="headerlink" title="IOC操作Bean管理-基于注解"></a>IOC操作Bean管理-基于注解</h4><blockquote><p>spring针对bean管理中==创建对象==提供注解</p><ul><li><p>@component</p></li><li><p>@service</p></li><li><p>@controller</p></li><li><p>@repository</p><p>注解功能都是一样的</p></li></ul></blockquote><blockquote><p>基于注解创建对象</p><ul><li><p>引入依赖</p><p>spring-aop-xx.jar</p></li><li><p>开启组件扫描</p></li></ul></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230111210744861.png" alt="image-20230111210744861"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#####################################################</span><br><span class="line">&lt;!--开启组件扫描</span><br><span class="line"><span class="number">1.</span>扫描多个包，使用`,`隔开</span><br><span class="line"><span class="number">2.</span>扫描包的上层目录</span><br><span class="line">--&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.miao&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><blockquote><p>测试一波</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//value值 相当于id值 &lt;bean id=&quot;userService&quot; class=&quot;&quot;&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">//@Service相当于 xx.xml文件中的bean对象</span></span><br><span class="line"><span class="meta">@Service(value = &quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userService add---------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">################################################</span><br><span class="line">&lt;!--开启组件扫描</span><br><span class="line"><span class="number">1.</span>扫描多个包，使用`,`隔开</span><br><span class="line"><span class="number">2.</span>扫描包的上层目录</span><br><span class="line">--&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.miao.annotation&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br><span class="line">    #############################################</span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;annotation.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        System.out.println(userService);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>基于注解方式实现属性注入</p><ul><li>@autowired：根据属性类型注入</li><li>@qualifier：根据属性名称注入</li><li>@resource：可以根据名称和类型注入属性</li><li>@value:注入普通类型属性</li></ul><p>使用注解的目的：简化xml配置</p></blockquote><blockquote><p>@autowired–根据属性类型进行注入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface UserDao &#123;</span><br><span class="line">    public void add();</span><br><span class="line">&#125;</span><br><span class="line">######################################</span><br><span class="line">@Repository(value = &quot;laoda&quot;) //相当于在bean中创建对象</span><br><span class="line">public class UserDaoImpl implements UserDao&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void add() &#123;</span><br><span class="line">        System.out.println(&quot;userdao add-----------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">############################################</span><br><span class="line">//value值 相当于id值 &lt;bean id=&quot;userService&quot; class=&quot;&quot;&gt;&lt;/bean&gt;</span><br><span class="line">//@Service相当于 xx.xml文件中的bean对象</span><br><span class="line">@Service(value = &quot;userService&quot;)</span><br><span class="line">public class UserService &#123;</span><br><span class="line">    /*</span><br><span class="line">    定义dao类型属性</span><br><span class="line">    不需要添加set方法</span><br><span class="line">    添加注入 属性注解</span><br><span class="line">     */</span><br><span class="line">//    @Qualifier(&quot;laoda&quot;)//根据名称进行注入</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDao userDao;</span><br><span class="line">    public void add()&#123;</span><br><span class="line">        System.out.println(&quot;userService add---------------&quot;);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@qualifier–根据名称进行属性注入，需要搭配@autowired 一起使用</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230111215848445.png" alt="image-20230111215848445"></p><p><img src="/2023/01/08/Spring-Study/image-20230111215942950.png" alt="image-20230111215942950"></p><blockquote><p>@resource:可以根据类型或者名称注入</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230111220535718.png" alt="image-20230111220535718"></p><blockquote><p>autowired 和 resource 的小区别</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230111220735045.png" alt="image-20230111220735045"></p><blockquote><p>@value</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230111221402645.png" alt="image-20230111221402645"></p><h4 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h4><blockquote><p>创建配置类，代替xml配置文件</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//作为配置类，替代xml配置文件</span></span><br><span class="line"><span class="comment">//相当于替换xml中的&lt;context:component-scan base-package=&quot;com.miao.annotation&quot;&gt;&lt;/context:component-scan&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.miao.annotation&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230111222517437.png" alt="image-20230111222517437"></p><h2 id="Aop"><a href="#Aop" class="headerlink" title="Aop"></a>Aop</h2><h4 id="aop概念"><a href="#aop概念" class="headerlink" title="aop概念"></a>aop概念</h4><blockquote><ol><li>面向切面编程</li><li>理解：在不通过修改源代码情况下，主干部分添加一个新功能</li></ol></blockquote><blockquote><p>aop底层原理–两种情况动态代理</p></blockquote><blockquote><p>有接口情况，使用JDK动态代理</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230111225020488.png" alt="image-20230111225020488"></p><blockquote><p>没有接口</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230111225505797.png" alt="image-20230111225505797"></p><h4 id="jdk动态代理实现"><a href="#jdk动态代理实现" class="headerlink" title="jdk动态代理实现"></a>jdk动态代理实现</h4><blockquote><p>调用newProxyInstance方法</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">    String <span class="title function_">update</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br><span class="line">###############################################</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add方法执行了---------&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;update方法执行了---------&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">###################################################</span><br><span class="line"><span class="keyword">package</span> com.miao.newproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">//慢慢理解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建接口类 代理对象</span></span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span> (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> <span class="title class_">UserDaoProxy</span>(userDao));</span><br><span class="line"><span class="comment">//        int res = dao.add(1, 2);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;res:--&quot;+res);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">update</span> <span class="operator">=</span> dao.update(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建代理对象 代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将需要代理的对象 传递过来</span></span><br><span class="line">    <span class="comment">//有参构造传递</span></span><br><span class="line">    <span class="comment">//这里代理的是UserDaoImpl,用Object代替了</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoProxy</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.obj=obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增强的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//方法之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之前执行。。。。。。。。&quot;</span>+method.getName()+<span class="string">&quot;:传递的参数&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line">        <span class="comment">//方法之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之后执行。。。。。。。。&quot;</span>+obj);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230111234021397.png" alt="image-20230111234021397"></p><h4 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h4><blockquote><ol><li><p>连接点</p><p>类里面哪些方法可以被增强，这些方法称为连接点</p></li><li><p>切入点</p><p>实际被真正增强的方法，称为切入点</p></li><li><p>通知(增强)</p><p>实际增强的逻辑部分称为通知</p><p>通知的类型：</p><ol><li>前置通知</li><li>后置通知</li><li>环绕通知</li><li>异常通知</li><li>最终通知</li></ol></li><li><p>切面</p><p>把通知应用到切入点的过程</p></li></ol></blockquote><h4 id="AOP操作"><a href="#AOP操作" class="headerlink" title="AOP操作"></a>AOP操作</h4><blockquote><p>spring框架一般基于aspectj实习AOP操作</p><ul><li>aspectj不是spring组成部分，独立AOP框架，一般aspectj和spring框架一起使用，进行aop操作</li></ul><p>基于aspectj实现aop操作</p><ul><li>基于xml配置文件实现</li><li>基于注解方式实现</li></ul><p>切入点表达式：</p><ul><li><p>语法结构：</p><p>execution（[][][权限修饰符] [返回类型] [类全路径] [方法名称] ([参数列表]) ）</p></li></ul></blockquote><blockquote><p>基于注解实现</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被增强的类</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//相当于bean中创建实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add 方法------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">####################################################</span><br><span class="line"><span class="comment">//需要增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知：before注解</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.miao.aopannotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">########################################################</span><br><span class="line">&lt;!--开启组件扫描</span><br><span class="line"><span class="number">1.</span>扫描多个包，使用`,`隔开</span><br><span class="line"><span class="number">2.</span>扫描包的上层目录</span><br><span class="line">--&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.miao.aopannotation&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br><span class="line">&lt;!--    开启aspectj代理对象--&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br><span class="line">   ###################################################</span><br><span class="line">       <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;aopannotation.xml&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        user.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/08/Spring-Study/image-20230112220245419.png" alt="image-20230112220245419"></p><p><img src="/2023/01/08/Spring-Study/image-20230112220256523.png" alt="image-20230112220256523"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//需要增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知：before注解</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.miao.aopannotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后置通知：before注解</span></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* com.miao.aopannotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;After.............&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前置通知：before注解</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.miao.aopannotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AfterReturning执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前置通知：before注解</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.miao.aopannotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AfterThrowing执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//环绕通知：before注解</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.miao.aopannotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Around之前执行了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被增强的方法</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;Around之后执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/08/Spring-Study/image-20230112221956234.png" alt="image-20230112221956234"></p><blockquote><p>异常通知</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230112222031579.png" alt="image-20230112222031579"></p><p><img src="/2023/01/08/Spring-Study/image-20230112222110187.png" alt="image-20230112222110187"></p><h4 id="注意点–相同切入点抽取"><a href="#注意点–相同切入点抽取" class="headerlink" title="注意点–相同切入点抽取"></a>注意点–相同切入点抽取</h4><p><img src="/2023/01/08/Spring-Study/image-20230112222705104.png" alt="image-20230112222705104"></p><h4 id="注意点–多个增强类对同一个方法增强，设置增强类优先级"><a href="#注意点–多个增强类对同一个方法增强，设置增强类优先级" class="headerlink" title="注意点–多个增强类对同一个方法增强，设置增强类优先级"></a>注意点–多个增强类对同一个方法增强，设置增强类优先级</h4><blockquote><p>在增强类上面添加注解@order（数字类型值），数字越小优先级越高</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230112223701746.png" alt="image-20230112223701746"></p><p><img src="/2023/01/08/Spring-Study/image-20230112223753922.png" alt="image-20230112223753922"></p><blockquote><p>完全注解开发</p></blockquote><p><img src="/2023/01/08/Spring-Study/image-20230112230235200.png" alt="image-20230112230235200"></p><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><blockquote></blockquote><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-study</title>
      <link href="/2023/01/06/JDBC-study/"/>
      <url>/2023/01/06/JDBC-study/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC的概述"><a href="#JDBC的概述" class="headerlink" title="JDBC的概述"></a>JDBC的概述</h2><h3 id="数据的持久化"><a href="#数据的持久化" class="headerlink" title="数据的持久化"></a>数据的持久化</h3><blockquote><p>持久化(persistence):主要应用是将内存中的数据存储在关系型数据库中</p></blockquote><h3 id="JDBC的介绍"><a href="#JDBC的介绍" class="headerlink" title="JDBC的介绍"></a>JDBC的介绍</h3><blockquote><ul><li>JDBC(java database connectivity):是一个<strong>独立于特定数据库管理系统</strong>，通用的SQL数据库存取和操作的公共接口，（API（java.sql.javax.sql）一种标准的方法去访问数据库</li></ul></blockquote><h2 id="获取数据库的连接"><a href="#获取数据库的连接" class="headerlink" title="获取数据库的连接"></a>获取数据库的连接</h2><h3 id="连接数据库方式一"><a href="#连接数据库方式一" class="headerlink" title="连接数据库方式一"></a>连接数据库方式一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miao.connection;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnectionTest</span> &#123;</span><br><span class="line"><span class="comment">//连接数据库方式一</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        jdbc:mysql:协议</span></span><br><span class="line"><span class="comment">        localhost:IP地址</span></span><br><span class="line"><span class="comment">        3306：默认MySQL端口号</span></span><br><span class="line"><span class="comment">        school：school数据库</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/school&quot;</span>;</span><br><span class="line">        <span class="comment">//将user和password封装在properties中</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        info.setProperty(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        info.setProperty(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> driver.connect(url,info);</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方式二：连接数据库（迭代）"><a href="#方式二：连接数据库（迭代）" class="headerlink" title="方式二：连接数据库（迭代）"></a>方式二：连接数据库（迭代）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式二：连接数据库</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//获取Driver实现类对象：使用反射</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) clazz.newInstance();</span><br><span class="line">    <span class="comment">//提供连接的数据库</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/school&quot;</span>;</span><br><span class="line">    <span class="comment">//提供用户名和密码</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    info.setProperty(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    info.setProperty(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, info);</span><br><span class="line">    System.out.println(connect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式三：使用DriverManager替换Driver</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//获取Driver实现类对象：使用反射</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) clazz.newInstance();</span><br><span class="line">    <span class="comment">//提供连接的url user password</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/school&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    DriverManager.registerDriver(driver);</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//方式四：加载Driver</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提供连接的url user password</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/school&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载Driver</span></span><br><span class="line">         Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Driver driver = (Driver) clazz.newInstance();</span></span><br><span class="line"><span class="comment">//        //注册驱动</span></span><br><span class="line"><span class="comment">//        DriverManager.registerDriver(driver);</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        在MySQL的实现类中，声明了这个操作</span></span><br><span class="line"><span class="comment">          static &#123;</span></span><br><span class="line"><span class="comment">              try &#123;</span></span><br><span class="line"><span class="comment">                  DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">              &#125; catch (SQLException var1) &#123;</span></span><br><span class="line"><span class="comment">                  throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="方式五"><a href="#方式五" class="headerlink" title="方式五"></a>方式五</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//方式五：通过读取配置文件获取连接数据库的 基本信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取配置文件的信息--方式一</span></span><br><span class="line"><span class="comment">//        InputStream is = ConnectionTest.class.getClassLoader().getResourceAsStream(&quot;db.properties&quot;);</span></span><br><span class="line"><span class="comment">//        Properties pros = new Properties();</span></span><br><span class="line"><span class="comment">//        pros.load(is);</span></span><br><span class="line">       <span class="comment">//读取配置文件的信息--方式二</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/db.properties&quot;</span>);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="comment">//加载驱动</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="PreparedStatement操作数据库"><a href="#PreparedStatement操作数据库" class="headerlink" title="PreparedStatement操作数据库"></a>PreparedStatement操作数据库</h2><h3 id="普通操作数据库"><a href="#普通操作数据库" class="headerlink" title="普通操作数据库"></a>普通操作数据库</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="comment">//ClassLoader.getSystemClassLoader() 获取系统类加载器</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(is);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        <span class="comment">//预编译sql语句，获取preparedstatement的实例</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into books(bookName,bookDetail) values(?,?)&quot;</span>;</span><br><span class="line">        ps = connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//填充占位符</span></span><br><span class="line">        ps.setString(<span class="number">1</span>,<span class="string">&quot;动物世界&quot;</span>);</span><br><span class="line">        ps.setString(<span class="number">2</span>,<span class="string">&quot;中国作家&quot;</span>);</span><br><span class="line">        <span class="comment">//执行操作</span></span><br><span class="line">        ps.execute();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//资源关闭</span></span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="literal">null</span>)&#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>连接驱动</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置文件：连接数据库</span><br><span class="line"># db.properties</span><br><span class="line">user=root</span><br><span class="line">password=123456</span><br><span class="line">url=jdbc:mysql://localhost:3306/school</span><br><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><h3 id="封装更新操作"><a href="#封装更新操作" class="headerlink" title="封装更新操作"></a>封装更新操作</h3><blockquote><p>工具类-JDBCUtil</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接驱动</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="comment">//ClassLoader.getSystemClassLoader() 获取系统类加载器</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭连接对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeResource</span><span class="params">(Connection con, Statement st)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (con != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//资源关闭</span></span><br><span class="line">                con.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (st != <span class="literal">null</span>)&#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更新操作封装</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通用的增删改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String sql,Object ...args)</span>&#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        conn = JDBCUtil.getConnection();</span><br><span class="line">        <span class="comment">//sql预编译</span></span><br><span class="line">        ps = conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//填充占位符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            ps.setObject(i+<span class="number">1</span>,args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        ps.execute();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭流对象</span></span><br><span class="line">        JDBCUtil.closeResource(conn,ps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCommon</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from books where bookId = ?&quot;</span>;</span><br><span class="line">    update(sql,<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单封装查询操作"><a href="#简单封装查询操作" class="headerlink" title="简单封装查询操作"></a>简单封装查询操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//针对某张表的通用查询</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">queryForBook</span><span class="params">(String sql,Object ...args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取连接</span></span><br><span class="line">            conn = JDBCUtil.getConnection();</span><br><span class="line">            <span class="comment">//sql预编译</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i+<span class="number">1</span>,args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">//获取结果集的 元数据</span></span><br><span class="line">            <span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">            <span class="comment">//通过ResultSetMetaData 获取结果集中的列数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line">            <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//需要一个对象</span></span><br><span class="line">                <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">                <span class="comment">//处理结果集一行中每一个列</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">//获取列值</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">columnValue</span> <span class="operator">=</span> rs.getObject(i + <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//获取每个列名</span></span><br><span class="line"><span class="comment">//                    String columnLabel = rsmd.getColumnLabel(i + 1);</span></span><br><span class="line">                    <span class="comment">//getColumnLabel() 针对于类的属性名 和 表的字段名 不一致的情况</span></span><br><span class="line">                    <span class="comment">//声明sql时，可以使用类的属性名 来命名字段的别名</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> rsmd.getColumnName(i + <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//给book对象指定columnName属性，赋值columnValue，通过反射</span></span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Book.class.getDeclaredField(columnName);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    field.set(book,columnValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> book;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtil.closeResource(conn,ps,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select bookId,bookName,bookDetail from books where bookId = ?&quot;</span>;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> queryForBook(sql, <span class="number">1</span>);</span><br><span class="line">    System.out.println(book);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQLStudy</title>
      <link href="/2023/01/06/MySQLStudy/"/>
      <url>/2023/01/06/MySQLStudy/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础-枚举类和注解</title>
      <link href="/2023/01/05/Java%E5%9F%BA%E7%A1%80-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
      <url>/2023/01/05/Java%E5%9F%BA%E7%A1%80-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><h3 id="枚举类的使用"><a href="#枚举类的使用" class="headerlink" title="枚举类的使用"></a>枚举类的使用</h3><blockquote><p>类的对象是有限的，确定的，比如：</p><ol><li>星期</li><li>季节</li><li>性别</li><li>…</li></ol><p>当需要定义一组常量是，建议使用枚举类</p></blockquote><h4 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miao.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">枚举类的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeasonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">spring</span> <span class="operator">=</span> Season.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义枚举类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span>&#123;</span><br><span class="line">    <span class="comment">//声明season对象的属性：private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化类的构造器，并给属性赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String seasonName,String seasonDesc)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="built_in">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提供当前枚举类的对个对象：public static final</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春天来了&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">AUTOMO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏天来了&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">FAIL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋天来了&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冬天来了&quot;</span>);</span><br><span class="line">    <span class="comment">//其他诉求</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用enum关键字定义枚举类"><a href="#使用enum关键字定义枚举类" class="headerlink" title="使用enum关键字定义枚举类"></a>使用enum关键字定义枚举类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miao.java1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用enum关键字</span></span><br><span class="line"><span class="comment">定义的枚举类 默认继承于 java.lang.Enum</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeasonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">spring</span> <span class="operator">=</span> Season.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line">        System.out.println(Season.class.getSuperclass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用enum关键字 定义枚举类</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season</span>&#123;</span><br><span class="line">    <span class="comment">//提供当前枚举类的对个对象：多个对象之间用“,”隔开，末尾对象用“;”结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春天来了&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏天来了&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋天来了&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冬天来了&quot;</span>);</span><br><span class="line">    <span class="comment">//声明season对象的属性：private final修饰</span></span><br><span class="line">    <span class="comment">//私有化类的构造器，并给属性赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String seasonName,String seasonDesc)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="built_in">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他诉求</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public String toString() &#123;</span></span><br><span class="line"><span class="comment">//        return &quot;Season&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;seasonName=&#x27;&quot; + seasonName + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment">//                &quot;, seasonDesc=&#x27;&quot; + seasonDesc + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment">//                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Enum类的主要方法"><a href="#Enum类的主要方法" class="headerlink" title="Enum类的主要方法"></a>Enum类的主要方法</h4><blockquote><ul><li>values():返回枚举类型的对象数组，可以遍历所有的枚举值</li><li>valueOf(String str):可以把一个字符串转为对应的枚举类对象，要求  是字符串必须是枚举类对象的“名字”，如果不是，会有运行时异常，IllegalArgumentException</li><li>toString():返回当前枚举类对象常量的名称</li></ul></blockquote><h3 id="注解-Annotation"><a href="#注解-Annotation" class="headerlink" title="注解(Annotation)"></a>注解(Annotation)</h3><h4 id="注解概述"><a href="#注解概述" class="headerlink" title="注解概述"></a>注解概述</h4><blockquote><ul><li>Annotation就是代码里的==特殊标记==，这些标记可以在编译，类加载，运行时被读取，并执行相应的处理</li><li>Annotation可以像修饰符一样被使用</li><li>框架=注解+反射+设计模式</li></ul></blockquote><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><blockquote><ul><li>注解声明：@interface</li><li>内部定义成员，通常使用value()表示</li><li>可以指定成员默认值，使用default定义</li><li>如果注解没有成员，表明是一个标识作用</li></ul></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation(&quot;hello&quot;)</span><span class="comment">//</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JDK中的元注解"><a href="#JDK中的元注解" class="headerlink" title="JDK中的元注解"></a>JDK中的元注解</h4><blockquote><p>元注解：解释说明其他注解</p></blockquote><blockquote><ol><li>Retention：指定所修饰的Annotation的生命周期，@Retention包含一个RetentionPolicy类型的成员变量：<ul><li>RetentionPolicy.SOURCE:在源文件中有效(源文件保留)</li><li>RetentionPolicy.CLASS:在class文件中有效</li><li>RetentionPolicy.RUNTIME:在运行时有效</li></ul></li><li>Target：用于指定被修饰的Annotation 能用于修饰哪些程序类型</li><li>Documented：表示所修饰的注解被Javadoc解析时可以保留下来</li><li>Inherited：被它修饰的Annotation 将具有继承性</li></ol></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础-反射</title>
      <link href="/2023/01/02/Java%E5%9F%BA%E7%A1%80-%E5%8F%8D%E5%B0%84/"/>
      <url>/2023/01/02/Java%E5%9F%BA%E7%A1%80-%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h2><h3 id="Java反射机制概述"><a href="#Java反射机制概述" class="headerlink" title="Java反射机制概述"></a>Java反射机制概述</h3><blockquote><ul><li>Reflection(反射)是被视为==动态语言==的关键，反射机制允许程序在执行期间借助于Reflection API取得任何类的内部信息，并能直接==操作任意对象的内部属性及方法==。</li><li>加载完类之后，在堆内存的方法区中就产生了一个Class类类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。==我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射。==</li></ul><p>正常方式：引入需要的“包类”名称—&gt;通过new实例化—&gt;取得实例化对象</p><p>反射方式：实例化对象—&gt;getClass（）方法—&gt;得到完整的“包类”名称</p></blockquote><h4 id="反射相关的主要API"><a href="#反射相关的主要API" class="headerlink" title="反射相关的主要API"></a>反射相关的主要API</h4><blockquote><ul><li>==java.lang.Class==:代表一个类</li><li>java.lang.reflect.Method:代表类的方法</li><li>java.lang.reflect.Field:代表类的成员变量</li><li>java.lang.reflect.Constructor:代表类的构造器</li><li>……</li></ul></blockquote><h4 id="反射简单示例"><a href="#反射简单示例" class="headerlink" title="反射简单示例"></a>反射简单示例</h4><blockquote><p>定义一个person类</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miao.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//私有 带参数 的构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//私有方法</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">nation</span><span class="params">(String nation)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我的国籍是：&quot;</span>+nation);</span><br><span class="line">        <span class="keyword">return</span> nation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>定义一个测试类</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miao.java;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest1</span> &#123;</span><br><span class="line">    <span class="comment">//反射之前 对于 person的操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;miao&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        <span class="comment">//调用对象的属性和方法（public才可以调用）</span></span><br><span class="line">        p.age=<span class="number">11</span>;</span><br><span class="line">        System.out.println(p.toString());</span><br><span class="line">        p.show();</span><br><span class="line">        <span class="comment">//在person类外部，不能通过person类的对象调用其内部私有构造，比如，私有属性和方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反射之后，对于person的操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        <span class="comment">//通过反射，创建person对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;tom&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) obj;</span><br><span class="line">        System.out.println(p.toString());</span><br><span class="line">        <span class="comment">//通过反射，调用对象的属性和方法</span></span><br><span class="line">        <span class="comment">//调用属性 getDeclaredField()</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        age.set(p,<span class="number">10</span>);</span><br><span class="line">        System.out.println(p.toString());</span><br><span class="line">        <span class="comment">//调用方法 getDeclaredMethod()</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">show</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        show.invoke(p);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过反射，可以调用person类的私有构造，比如：私有构造器，方法，属性</span></span><br><span class="line">        <span class="comment">//调用私有构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> (Person) constructor1.newInstance(<span class="string">&quot;ttom&quot;</span>);</span><br><span class="line">        System.out.println(p1.toString());</span><br><span class="line">        <span class="comment">//调用私有属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(p1,<span class="string">&quot;jjru&quot;</span>);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        <span class="comment">//调用私有方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">nation</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;nation&quot;</span>, String.class);</span><br><span class="line">        nation.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">nation1</span> <span class="operator">=</span> (String) nation.invoke(p1,<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        System.out.println(nation1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>test2()的结果</p></blockquote><p><img src="/2023/01/02/Java%E5%9F%BA%E7%A1%80-%E5%8F%8D%E5%B0%84/image-20230103223523860.png" alt="image-20230103223523860"></p><h3 id="理解Class类并获取Class实例"><a href="#理解Class类并获取Class实例" class="headerlink" title="理解Class类并获取Class实例"></a>理解Class类并获取Class实例</h3><blockquote><p>关于java.lang.Class类的理解</p></blockquote><blockquote><ol><li>类的加载过程<ul><li>程序经过javac.exe命令，生成一个或多个字节码文件（.class结尾）</li><li>使用java.exe命令对某个字节码文件解释运行，相当于将字节码文件加载到内存中。（==此过程称为类的加载==）</li><li>==加载到内存中的类，称为运行时类，作为Class的一个实例==</li></ul></li><li>Class的实例对应着一个运行时类</li><li>加载到内存中的运行时类，会缓存一定的时间，在此时间，我们可以通过不同的方式来获取此运行时类</li></ol></blockquote><blockquote><p>获取Class实例的方式</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//方式一 调用运行时类的属性 .class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line">        <span class="comment">//方式二 调用运行时类的对象，调用getClass()方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> p.getClass();</span><br><span class="line">        System.out.println(clazz1);</span><br><span class="line">        <span class="comment">//方式三 调用Class的静态方法，forName（String classPath）--------常用</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.miao.java.Person&quot;</span>);</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line"><span class="comment">//        Class clazz3 = Class.forName(&quot;java.lang.String&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(clazz3);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">        System.out.println(clazz == clazz1);<span class="comment">//true</span></span><br><span class="line">        System.out.println(clazz == clazz2);<span class="comment">//true</span></span><br><span class="line">        <span class="comment">//方式四 调用类的加载器，ClassLoader</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ReflectionTest1.class.getClassLoader();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz4</span> <span class="operator">=</span> classLoader.loadClass(<span class="string">&quot;com.miao.java.Person&quot;</span>);</span><br><span class="line">        System.out.println(clazz4);</span><br><span class="line">        System.out.println(clazz == clazz4);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="类的加载与ClassLoader的理解"><a href="#类的加载与ClassLoader的理解" class="headerlink" title="类的加载与ClassLoader的理解"></a>类的加载与ClassLoader的理解</h3><h4 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h4><blockquote><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过以下步骤对该类进行初始化</p><ol><li>类的加载(Load)<ul><li>将类的class文件读入内存，并为之创建一个java.lang.Class对象，==此过程由类加载器完成==</li></ul></li><li>类的链接(Link)<ul><li>将类的二进制数据合并到JRE中</li></ul></li><li>类的初始化(Initialize)<ul><li>JVM负责对类进行初始化</li></ul></li></ol></blockquote><blockquote><ol><li>源程序（*.java文件）</li><li>经过Java编译器</li><li>字节码（*.class文件）</li><li>类装载器</li><li>字节码效验器</li><li>解释器</li><li>操作系统平台</li></ol></blockquote><h4 id="了解ClassLoader"><a href="#了解ClassLoader" class="headerlink" title="了解ClassLoader"></a>了解ClassLoader</h4><blockquote><p>类加载器的作用</p></blockquote><blockquote><p>类加载器的作用：用来把类(class)装载进内存的，JVM规范定义了如下的类的加载器</p><ul><li><p>Bootstap ClassLoader</p><p>引导类加载器：</p><p>JVM自带的类加载器，负责java平台核心库</p><p>负责加载Java安装目录下的/jre/lib类库（核心类库）至JVM中，</p><p>不继承java.lang.ClassLoader，不可以被Java程序直接调用，</p><p>本身是用C++写的</p></li><li><p>Extension ClassLoader</p><p>扩展类加载器：</p><p>负责加载Java安装目录下的/jre/lib/ext类库（扩展类库）至JVM</p><p>Java程序可直接调用</p></li><li><p>Application ClassLoader</p><p>应用程序类加载器：</p><p>负责加载CLASSPATH路径下的类库，</p><p>我们写的类就是通过这个加载器完成加载，</p><p>可以通过 ClassLoader.getSystemClassLoader()来获取这个加载器</p></li><li><p>自定义类加载器</p></li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/19628259-32f0a330bb631501.png" alt="img"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单了解  类加载器</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//调用当前类的 getClassLoader()</span></span><br><span class="line">    <span class="comment">//使用系统类加载器进行加载   sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoaderTest.class.getClassLoader();</span><br><span class="line">    System.out.println(classLoader);</span><br><span class="line">    <span class="comment">//调用系统类加载器的getParent()，获得扩展类加载器   sun.misc.Launcher$ExtClassLoader@5a07e868</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> classLoader.getParent();</span><br><span class="line">    System.out.println(parent);</span><br><span class="line">    <span class="comment">//调用扩展类加载器，无法获取 引导类加载器   null</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">parent1</span> <span class="operator">=</span> parent.getParent();</span><br><span class="line">    System.out.println(parent1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h4><blockquote><p>方式一</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//读取配置文件方式一</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/main/resources/jdbc.properties&quot;</span>);</span><br><span class="line">    pros.load(fil);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;user:&quot;</span>+user+<span class="string">&quot;password:&quot;</span>+password);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">     <span class="comment">//类加载器 读取配置文件方式二</span></span><br><span class="line">     <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">     <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoaderTest.class.getClassLoader();</span><br><span class="line">     <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> classLoader.getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">     pros.load(is);</span><br><span class="line"></span><br><span class="line">     <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">     <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">     System.out.println(<span class="string">&quot;user:&quot;</span>+user+<span class="string">&quot;----password:&quot;</span>+password);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h3><h4 id="通过反射创建运行时类的对象"><a href="#通过反射创建运行时类的对象" class="headerlink" title="通过反射创建运行时类的对象"></a>通过反射创建运行时类的对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过反射创建运行时类的对象</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException &#123;</span><br><span class="line">     <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">     newInstance() 调用此方法，创建对应的运行时类的对象，内部调用了运行时类的空参的构造方法</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">     System.out.println(obj);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="简单了解反射的动态性"><a href="#简单了解反射的动态性" class="headerlink" title="简单了解反射的动态性"></a>简单了解反射的动态性</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//体验反射的动态性</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                classPath=<span class="string">&quot;java.util.Date&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                classPath=<span class="string">&quot;java.lang.Object&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                classPath=<span class="string">&quot;com.miao.java.Person&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> getInstance(classPath);</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个指定的类</span></span><br><span class="line"><span class="comment">classPath:指定类的全类名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getInstance</span><span class="params">(String classPath)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(classPath);</span><br><span class="line">    <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src="/2023/01/02/Java%E5%9F%BA%E7%A1%80-%E5%8F%8D%E5%B0%84/image-20230104231207848.png" alt="image-20230104231207848"></p><h3 id="获取运行时类的完整结构"><a href="#获取运行时类的完整结构" class="headerlink" title="获取运行时类的完整结构"></a>获取运行时类的完整结构</h3><p>待续…</p><h3 id="调用运行时类的指定结构"><a href="#调用运行时类的指定结构" class="headerlink" title="调用运行时类的指定结构"></a>调用运行时类的指定结构</h3><h3 id="反射的应用：动态代理"><a href="#反射的应用：动态代理" class="headerlink" title="反射的应用：动态代理"></a>反射的应用：动态代理</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Typora常用</title>
      <link href="/2023/01/02/Typora%E5%B8%B8%E7%94%A8/"/>
      <url>/2023/01/02/Typora%E5%B8%B8%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>[toc] </p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>标题在行的开头使用1-6个＃字符，对应于标题级别1-6。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><h2 id="引用文字（常用）"><a href="#引用文字（常用）" class="headerlink" title="引用文字（常用）"></a>引用文字（常用）</h2><p>Markdown 使用电子邮件样式&gt;字符进行块引用。它们表示为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 这是第一段</span><br><span class="line">&gt; 这是第二段</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>输入 <code>* </code> 将创建一个无序列表，该 <code>*</code> 符号可以替换为 <code>+</code> 或 <code>-</code>.</p><p>输入 1.  将创建一个有序列表，</p><blockquote><ol><li>a</li><li>b</li></ol><ul><li>a</li><li>b</li></ul></blockquote><h2 id="代码块-常用"><a href="#代码块-常用" class="headerlink" title="代码块(常用)"></a>代码块(常用)</h2><p>输入```之后输入一个可选的语言标识符</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">这里编写...</span><br></pre></td></tr></table></figure><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>您可以像这样创建脚注[^footnote]. [^footnote]: Here is the <strong>text</strong> of the <em><strong>*footnote*</strong></em>.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">您可以像这样创建脚注[^footnote].</span><br><span class="line"></span><br><span class="line">[^footnote]: Here is the *text* of the **footnote**.</span><br></pre></td></tr></table></figure><h2 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h2><p>输入 <code>***</code> 或 <code>---</code> 在空行上按 <code>enter</code> 键将绘制一条水平线。</p><hr><hr><h2 id="目录（toc）"><a href="#目录（toc）" class="headerlink" title="目录（toc）"></a>目录（toc）</h2><p>输入 <code>[toc]</code> 然后按 enter键将创建一个“目录”部分，自动从文档内容中提取所有标题，其内容会自动更新。</p><p>[toc]</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>This is <a href="https://www.miaostudy.top/" title="blog">an example</a> inline link. <a href="https://www.miaostudy.top/">This link</a> has no title attribute.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br><span class="line"></span><br><span class="line">[This link](http://example.net/) has no title attribute.</span><br></pre></td></tr></table></figure><h2 id="URL网址"><a href="#URL网址" class="headerlink" title="URL网址"></a>URL网址</h2><p> <code>&lt;</code>括号括起来<code>&gt;</code></p><p><a href="https://www.miaostudy.top/">https://www.miaostudy.top</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![替代文字](/path/to/img.jpg)</span><br><span class="line">![替代文字](/path/to/img.jpg &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><h2 id="强调（斜体）"><a href="#强调（斜体）" class="headerlink" title="强调（斜体）"></a>强调（斜体）</h2><p><strong>单个星号</strong></p><p> <em><em>单个下划线</em></em></p><p>*这个文字被文字星号包围*</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*单个星号*</span><br><span class="line">_单个下划线_</span><br><span class="line">\*这个文字被文字星号包围\*</span><br></pre></td></tr></table></figure><h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h2><p>用两个 * 或 _ 包裹文本</p><p><strong>双星号</strong></p><p><strong>双重下划线</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**双星号**</span><br><span class="line">__双重下划线__</span><br></pre></td></tr></table></figure><h2 id="表情符号-smile"><a href="#表情符号-smile" class="headerlink" title="表情符号 :smile:"></a>表情符号 :smile:</h2><p>输入表情符号的语法是 <code>:smile:</code></p><p><img src="/2023/01/02/Typora%E5%B8%B8%E7%94%A8/image-20230102221136951.png" alt="image-20230102221136951"></p><h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><p>请在 <code>偏好设置</code> 面板 -&gt; <code>Markdown扩展语法</code> 选项卡中启用它</p><p>==highlight==</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==highlight==</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>error:0308010C:digital envelope routines::unsupported</title>
      <link href="/2023/01/02/error-0308010C-digital-envelope-routines-unsupported/"/>
      <url>/2023/01/02/error-0308010C-digital-envelope-routines-unsupported/</url>
      
        <content type="html"><![CDATA[<h3 id="windows下"><a href="#windows下" class="headerlink" title="windows下"></a>windows下</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> NODE_OPTIONS=--openssl-legacy-provider</span><br></pre></td></tr></table></figure><p><img src="/2023/01/02/error-0308010C-digital-envelope-routines-unsupported/image-20230102172059752.png" alt="image-20230102172059752"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>聊聊戒烟那些事儿</title>
      <link href="/2023/01/01/%E8%81%8A%E8%81%8A%E6%88%92%E7%83%9F%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>/2023/01/01/%E8%81%8A%E8%81%8A%E6%88%92%E7%83%9F%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="初次接触"><a href="#初次接触" class="headerlink" title="初次接触"></a>初次接触</h3><blockquote><p>​    现在的我已然20出头，然而你可能不会相信，我的烟龄已有18、19年了，回首看看，真是觉得可怕。</p><p>​    第一次接触的时候年龄很小，还没有上学，可能是因为那个时候接触的环境不是很好，在我和小伙伴经常玩耍的地方（其实也就是租住的房子门口），有一个棋牌室，很简陋的一个房间，为什么会吸引我和小伙伴呢，因为旁边有一个超市，什么概念，我就不解释了。</p><p>​    小孩子小的时候，总喜欢模仿，看见大人嘴里叼着纸卷，还会吐出烟雾，在我们看来，这是一个很神奇的东西，说出来不怕你们笑话，我们会等大人离开后，冲进去，争夺桌子上大人遗留的烟盒，看看里面是否还有纸卷，我还是很幸运的，大多时候都会找到一到两根，我们几个就会躲到一个秘密基地（废弃的院子或者楼房），几个人蹲一圈，紧紧地盯着我手里的那一根烟，我擦亮火柴，点燃后象征性地甩了甩，吸了一口，本以为会很舒服，结果呛的我眼泪直流，烟雾在我嗓子里也不出来，其他伙伴忙问我怎么样，你试试不就知道了，我回道，随后将烟传给下一个人，看见他出丑，我心里平衡多了，我发现其中一个年龄大点儿的却表现得很舒服，忙问他原因，然后他说……就这样，我学会了第一次吸烟，而且，持续到了上学年龄。    </p></blockquote><h3 id="很酷的事儿"><a href="#很酷的事儿" class="headerlink" title="很酷的事儿"></a>很酷的事儿</h3><blockquote><p>在学校，你知道最酷的事儿是什么吗?吸烟，在厕所吸烟。我都不知道自己是为了什么去吸烟，可能是为了追寻在多数中的一种存在感，有人会说，吸烟影响学习，实话告诉你，吸烟跟学习没有半点关系。酒有酒友，烟有烟友，每到一下课，我们几个就会去厕所吸烟，有望风的，教导主任一走近，我们就会鸟飞兽散，不被抓到被我们认为是很酷的事儿。</p></blockquote><h3 id="放飞自我"><a href="#放飞自我" class="headerlink" title="放飞自我"></a>放飞自我</h3><blockquote><p>持续到大学，真的是彻底自由了，没人管的感觉是真的爽，但真的有点空虚（后知后觉）。可以随时随地的吸烟，当然也知道吸烟有害健康，谁在乎呢，当时的想法就是这样，直至步入社会。</p></blockquote><h3 id="健身的目的"><a href="#健身的目的" class="headerlink" title="健身的目的"></a>健身的目的</h3><blockquote><p>​    想一想还是有点想笑，当我开始健身时，周围的朋友都用一种不怀好意的眼神打量我，“老实交代，看上哪个漂亮的小姐姐了”，朋友打趣道，我就一笑了之，谁能想到我真实的想法是这样的，好身体可以吸烟更长久，关键是我还坚持下来了，附上一张图：</p></blockquote><p><img src="/2023/01/01/%E8%81%8A%E8%81%8A%E6%88%92%E7%83%9F%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/A4DA4E2B426D8D6EC05B61535DA53E0B.png" alt="img"></p><h3 id="奇怪的想法"><a href="#奇怪的想法" class="headerlink" title="奇怪的想法"></a>奇怪的想法</h3><blockquote><p>​    有时候一个人吸烟时，我会乱想，会产生各种天马行空的想法，我的一个想法是这样的，我的大脑可以控制我的种种行为，比如：健身，我做到了，那戒烟呢，我还没试过呢，要不要测试一下大脑的控制权在什么程度，ok，可以试一下。到这里，大脑对话结束，有很多人说戒烟很难，我就想挑战一下，2023年一年不吸烟，我可能是想证明一点，人的大脑可以控制人的行为，并且可以随意切换行为。</p></blockquote><h3 id="一年的第一天"><a href="#一年的第一天" class="headerlink" title="一年的第一天"></a>一年的第一天</h3><blockquote><p>​    突然感觉这有点像做实验，然后做笔记记录今天我的各种状态，想想还有点小激动呢，好了，我来说一下今天都有什么感觉，嗯~，没啥大感觉，心里有时候会有一种空虚的感觉，总感觉今天忘做了一件事，原来是吸烟啊，这东西不能想，你越不去想你脑中的图像就越清晰，这应该是心里的一种暗示，当烟图像在脑中挥之不去的时候，我会想用一种东西代替它，转移我的注意力，比如，进食，刷剧……<br>​    总算到了一天的最后时刻，我的战斗赢了，既然赢了第一次，就会赢无数次，2023.1.1总结。<br>​    交代一点，如果今年的某一天吸烟了，我会记录下来，时间，地点，和谁，我都会记录下来。（留个退路，哈哈）</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>self-discipline</title>
      <link href="/2022/12/31/self-discipline/"/>
      <url>/2022/12/31/self-discipline/</url>
      
        <content type="html"><![CDATA[<h2 id="革命的本钱"><a href="#革命的本钱" class="headerlink" title="革命的本钱"></a>革命的本钱</h2><p><img src="/2022/12/31/self-discipline/A4DA4E2B426D8D6EC05B61535DA53E0B.png" alt="img"></p><p><img src="/2022/12/31/self-discipline/DEEC3E0C38A04E2EFD9762A536231E80.png" alt="img"></p><p><img src="/2022/12/31/self-discipline/74FE4EEB99C81C4953CAF339655E5EA6.png" alt="img"></p><p><img src="/2022/12/31/self-discipline/B868C4552B2905A2F106B7773F7CC4D3.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring学习</title>
      <link href="/2022/12/31/spring%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/12/31/spring%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1：使用无参构造创建对象，默认</span><br><span class="line">2：使用有参构造创建对象</span><br><span class="line">1：下标赋值</span><br><span class="line">图片</span><br><span class="line">2：通过参数名赋值</span><br><span class="line">图片</span><br></pre></td></tr></table></figure><h3 id="DI依赖注入"><a href="#DI依赖注入" class="headerlink" title="DI依赖注入"></a>DI依赖注入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1：构造器注入</span><br><span class="line">2：set注入（重点）</span><br><span class="line">依赖：bean对象的创建依赖于容器</span><br><span class="line">注入：bean对象中的所有属性，都有容器注入</span><br></pre></td></tr></table></figure><h3 id="c命名和p命名空间注入"><a href="#c命名和p命名空间注入" class="headerlink" title="c命名和p命名空间注入"></a>c命名和p命名空间注入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用前需要添加 c 或 p 的第三方约束</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单例：默认</span><br><span class="line">原型：每次从容器中get时，都会获得一个新的对象</span><br></pre></td></tr></table></figure><h3 id="bean的自动装配"><a href="#bean的自动装配" class="headerlink" title="bean的自动装配"></a>bean的自动装配</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring会在上下文中自动寻找，并自动给bean装配属性</span><br><span class="line"></span><br><span class="line">三种装配方式</span><br><span class="line">1：在xml中显示装配</span><br><span class="line">2：在Java中显示装配</span><br><span class="line">3：隐式的自动装配（重要）</span><br><span class="line">autowire</span><br><span class="line">:byname,自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id</span><br><span class="line">:bytype,自动在容器上下文中查找，和自己对象属性类型相同的bean</span><br><span class="line">resource</span><br><span class="line">:</span><br></pre></td></tr></table></figure><h4 id="使用注解自动装配"><a href="#使用注解自动装配" class="headerlink" title="使用注解自动装配"></a>使用注解自动装配</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">导入约束</span><br><span class="line">配置注解的支持:context:annotation-config(重要)</span><br><span class="line">图片</span><br><span class="line"></span><br><span class="line">@autowire</span><br><span class="line">@resource</span><br><span class="line"></span><br><span class="line">@component（组件） :这个类 相当于注册了一个bean交给spring容器管理</span><br><span class="line"></span><br><span class="line">衍生注解（等价于@component）</span><br><span class="line">dao@repository</span><br><span class="line">service@service</span><br><span class="line">controller@controller</span><br></pre></td></tr></table></figure><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代理模式（AOP的底层原理）</span><br><span class="line">静态代理模式</span><br><span class="line">：</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springmvc乱码</title>
      <link href="/2022/12/31/springmvc%E4%B9%B1%E7%A0%81/"/>
      <url>/2022/12/31/springmvc%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="web-xml中添加"><a href="#web-xml中添加" class="headerlink" title="web.xml中添加"></a>web.xml中添加</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--    配置SpringMVC乱码过滤--&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;UTF-<span class="number">8</span>&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;         </span><br></pre></td></tr></table></figure><h3 id="JSON乱码问题"><a href="#JSON乱码问题" class="headerlink" title="JSON乱码问题"></a>JSON乱码问题</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redisstudy</title>
      <link href="/2022/12/30/redisstudy/"/>
      <url>/2022/12/30/redisstudy/</url>
      
        <content type="html"><![CDATA[<h3 id="redis概述"><a href="#redis概述" class="headerlink" title="redis概述"></a>redis概述</h3><blockquote><p>redis是什么？</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REmote DIctionary Server(Redis) </span><br><span class="line">Redis 是一个高性能的key-value数据库</span><br><span class="line">性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</span><br></pre></td></tr></table></figure><h3 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h3><blockquote><p><strong>下载地址：</strong><a href="https://github.com/tporadowski/redis/releases">https://github.com/tporadowski/redis/releases</a></p></blockquote><p><img src="/2022/12/30/redisstudy/image-20221230232353283.png" alt="image-20221230232353283"></p><h3 id="linux安装"><a href="#linux安装" class="headerlink" title="linux安装"></a>linux安装</h3><blockquote><p><strong>下载地址：</strong><a href="http://redis.io/download">http://redis.io/download</a></p></blockquote><p><img src="/2022/12/30/redisstudy/image-20221231214947545.png" alt="image-20221231214947545"></p><h3 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h3><h4 id="redis-key"><a href="#redis-key" class="headerlink" title="redis-key"></a>redis-key</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 0(0-15)  //切换第0个数据库</span><br><span class="line">dbsize//查看当前数据库大小</span><br><span class="line">flushdb   //清除当前数据库</span><br><span class="line">flushall   //清除所有数据库</span><br><span class="line">type name  //判断key 类型</span><br><span class="line">keys *//查看所有的key</span><br><span class="line">set name miaomiao  //set key</span><br><span class="line">get name   //get key</span><br><span class="line">del name  //删除key name</span><br><span class="line">exists  //判断当前key是否存在</span><br><span class="line">move name 1  //移除key 在一号数据库</span><br><span class="line">expire name 10  //设置key 10秒后过期</span><br><span class="line">ttl name   //查看当前key剩余时间</span><br><span class="line">type name  //查看当前key类型</span><br></pre></td></tr></table></figure><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set key1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;age&quot;</span><br><span class="line">2) &quot;name&quot;</span><br><span class="line">3) &quot;key1&quot;</span><br><span class="line">127.0.0.1:6379&gt; exists key1 //查看key1是否存在</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; append key1 &#x27;hello&#x27; //为key1追加内容</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; exists key1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;v1hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; append key1 &#x27;,miaostudy&#x27;</span><br><span class="line">(integer) 17</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;v1hello,miaostudy&quot;</span><br><span class="line">127.0.0.1:6379&gt; strlen key1 //查看key1字符长度</span><br><span class="line">(integer) 17</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">###################################</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;age&quot;</span><br><span class="line">2) &quot;name&quot;</span><br><span class="line">3) &quot;key1&quot;</span><br><span class="line">127.0.0.1:6379&gt; append key2 &#x27;aaabbb&#x27; //如果追加key不存在，就相当于set key</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;age&quot;</span><br><span class="line">2) &quot;name&quot;</span><br><span class="line">3) &quot;key1&quot;</span><br><span class="line">4) &quot;key2&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">#############################################</span><br><span class="line">127.0.0.1:6379&gt; set views 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line">&quot;0&quot;</span><br><span class="line">127.0.0.1:6379&gt; incr views //加一</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; incr views</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; decr views //减一</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; decr views</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; incrby views 9 //设置一次性加9</span><br><span class="line">(integer) 9</span><br><span class="line">127.0.0.1:6379&gt; incrby views 9</span><br><span class="line">(integer) 18</span><br><span class="line">127.0.0.1:6379&gt; decrby views 5 //设置一次性减5</span><br><span class="line">(integer) 13</span><br><span class="line">127.0.0.1:6379&gt; decrby views 5</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">############################################</span><br><span class="line">字符串范围 range</span><br><span class="line">127.0.0.1:6379&gt; set info hfaksdhsdkjh</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get ingo</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get info</span><br><span class="line">&quot;hfaksdhsdkjh&quot;</span><br><span class="line">127.0.0.1:6379&gt; getrange info 0 3 //获取范围</span><br><span class="line">&quot;hfak&quot;</span><br><span class="line">127.0.0.1:6379&gt; getrange info 0 -1 //-1 查看长度</span><br><span class="line">&quot;hfaksdhsdkjh&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">############################################</span><br><span class="line">setrange 替换</span><br><span class="line">127.0.0.1:6379[2]&gt; set key1 adcdeeee</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; get key1</span><br><span class="line">&quot;adcdeeee&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; setrange key1 1 xx //d 替换 xx</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379[2]&gt; get key1</span><br><span class="line">&quot;axxdeeee&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">#######################################</span><br><span class="line">setex(set with expire)设置过期时间</span><br><span class="line">setnx(set if not exist)不存在设置</span><br><span class="line">127.0.0.1:6379[2]&gt; setex key3 30 &#x27;mymy&#x27;//设置key过期时间</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; ttl key3 //查看剩余时间</span><br><span class="line">(integer) 26</span><br><span class="line">127.0.0.1:6379[2]&gt; ttl key3</span><br><span class="line">(integer) 14</span><br><span class="line">127.0.0.1:6379[2]&gt; get key3</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379[2]&gt; setnx mykey &#x27;wodekey&#x27; //如果不存在设置key</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; get mykey</span><br><span class="line">&quot;wodekey&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; setnx mykey &#x27;nidekey&#x27;</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379[2]&gt; get mykey</span><br><span class="line">&quot;wodekey&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">##########################################</span><br><span class="line">mset 一次设置多个值</span><br><span class="line">mget 一次获取多个值</span><br><span class="line">127.0.0.1:6379[2]&gt; mset k1 v1 k2 v2//设置多个值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; mget k1 k2 //获取多个值</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; msetnx k1 v1 k3 v3 //msetnx是一个原子性操作，要么一起成功，要么一起失败</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379[2]&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">################################################</span><br><span class="line">set user:1 &#123;name:mm,age:22&#125; 设置一个user:1 对象，值为json字符保存的对象</span><br><span class="line">127.0.0.1:6379[2]&gt; mset user:1:name lisi user:1:age 22</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; mget user:1:name user:1:age</span><br><span class="line">1) &quot;lisi&quot;</span><br><span class="line">2) &quot;22&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">################################################</span><br><span class="line">getset 先get然后set</span><br><span class="line">127.0.0.1:6379[2]&gt; getset db redis //如果存在值 返回并设置新的值</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379[2]&gt; get db</span><br><span class="line">&quot;redis&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; getset db mogodb</span><br><span class="line">&quot;redis&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; get db</span><br><span class="line">&quot;mogodb&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>所有的list命令都是用l 开头的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; lpush list one //push元素进去头部</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; lpush list two</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379[2]&gt; lpush list three</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange list 0 -1 //获取所有元素</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange list 0 1 //获取范围元素</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">127.0.0.1:6379[2]&gt; lpush list left //添加元素位置在左边</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange list 0 -1 //获取list值</span><br><span class="line">1) &quot;left&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">4) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; rpush list right //rpush 添加元素在右边</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange list 0 -1 //获取区间值</span><br><span class="line">1) &quot;left&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">4) &quot;one&quot;</span><br><span class="line">5) &quot;right&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">#############################################</span><br><span class="line">lpop 弹出左边值</span><br><span class="line">rpop 弹出右边值</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange list 0 -1</span><br><span class="line">1) &quot;left&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">4) &quot;one&quot;</span><br><span class="line">5) &quot;right&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; lpop list //弹出左边值</span><br><span class="line">&quot;left&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; rpop list //弹出右边值</span><br><span class="line">&quot;right&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange list 0 -1</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">###########################################</span><br><span class="line">lindex 通过下标获取值</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange list 0 -1</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; lindex list 1 //获取下标为1的值</span><br><span class="line">&quot;two&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; lindex list 0</span><br><span class="line">&quot;three&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">###############################################</span><br><span class="line">llen 获取列表长度</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange list 0 -1</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; llen list</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">#############################################</span><br><span class="line">lrem 移除指定的值</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange list 0 -1</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">4) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; lrem list 1 two //移除一个值为two</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange list 0 -1</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; lrem list 2 three //移除两个值为three</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange list 0 -1</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">#########################################</span><br><span class="line">ltrim 截断list</span><br><span class="line">127.0.0.1:6379[2]&gt; rpush mylist hh1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; rpush mylist hh2</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379[2]&gt; rpush mylist hh3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379[2]&gt; rpush mylist hh4</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange mylist 0 -1</span><br><span class="line">1) &quot;hh1&quot;</span><br><span class="line">2) &quot;hh2&quot;</span><br><span class="line">3) &quot;hh3&quot;</span><br><span class="line">4) &quot;hh4&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; ltrim mylist 1 2 //截取下标1 2的值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange mylist 0 -1</span><br><span class="line">1) &quot;hh2&quot;</span><br><span class="line">2) &quot;hh3&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">###############################################</span><br><span class="line">rpoplpush 移除列表最后一个值到另一个列表中</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange mylist 0 -1</span><br><span class="line">1) &quot;hh2&quot;</span><br><span class="line">2) &quot;hh3&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; rpoplpush mylist myotherlist//移动最后值到新的列表</span><br><span class="line">&quot;hh3&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange mylist 0 -1</span><br><span class="line">1) &quot;hh2&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange myotherlist 0 -1 //查看新的列表中的值</span><br><span class="line">1) &quot;hh3&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">##########################################</span><br><span class="line">lset 将列表中指定下标的值替换另一个值</span><br><span class="line">127.0.0.1:6379[2]&gt; exists list</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379[2]&gt; lpush list value</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange list 0 0</span><br><span class="line">1) &quot;value&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; lset list 0 item //替换下标为0的值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange list 0 0</span><br><span class="line">1) &quot;item&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">###############################################</span><br><span class="line">linsert 将某个元素value插入列表中某个元素的前面或者后面</span><br><span class="line">127.0.0.1:6379[2]&gt; rpush mylist hello</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; rpush mylist world</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange mylist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; linsert mylist after world welcome //world后面插入值welcome</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange mylist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">3) &quot;welcome&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; linsert mylist before world new //world前面插入值new</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379[2]&gt; lrange mylist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;new&quot;</span><br><span class="line">3) &quot;world&quot;</span><br><span class="line">4) &quot;welcome&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>set的值是不能重复的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; sadd myset hello //添加元素</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; sadd myset world</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; sadd myset welcome</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset //查看所有元素</span><br><span class="line">1) &quot;welcome&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; sismember myset hello //判断是否存在某个元素</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; sismember myset nihao</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">##############################################</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset</span><br><span class="line">1) &quot;welcome&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; scard myset //获取集合元素的个数</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">##################################################</span><br><span class="line">127.0.0.1:6379[2]&gt; SMEMBERS myset</span><br><span class="line">1) &quot;welcome&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; srem myset hello //移除某一个元素</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; SMEMBERS myset</span><br><span class="line">1) &quot;welcome&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">#################################################</span><br><span class="line">127.0.0.1:6379[2]&gt; SMEMBERS myset</span><br><span class="line">1) &quot;key1&quot;</span><br><span class="line">2) &quot;welcome&quot;</span><br><span class="line">3) &quot;world&quot;</span><br><span class="line">4) &quot;key2&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; srandmember myset //随机抽取一个元素</span><br><span class="line">&quot;world&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; srandmember myset</span><br><span class="line">&quot;welcome&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">#################################################</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset</span><br><span class="line">1) &quot;key1&quot;</span><br><span class="line">2) &quot;welcome&quot;</span><br><span class="line">3) &quot;world&quot;</span><br><span class="line">4) &quot;key2&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; spop myset //随机弹出一个元素</span><br><span class="line">&quot;key1&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; spop myset</span><br><span class="line">&quot;key2&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">#################################################</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset</span><br><span class="line">1) &quot;welcome&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; sadd myset2 key1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; smove myset myset2 hello //移动元素到另一个集合中</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; smembers myset2</span><br><span class="line">1) &quot;key1&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">##############################################</span><br><span class="line">127.0.0.1:6379[2]&gt; sadd key a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; sadd key b</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; sadd key c</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; sadd key1 c</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; sadd key1 d</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; sdiff key key1 //两个集合的差集</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; sinter key key1 //两个集合的交集</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; sunion key key1 //两个集合的并集</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">4) &quot;d&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4><p>map集合,key-map,这时候值是一个集合</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; hset myhash field miaostudy //存值</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; hget myhash field //取值</span><br><span class="line">&quot;miaostudy&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; hmset myhash field hello field1 world //存入多个值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; hmget myhash field field1 //取出多个值</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; hgetall myhash //查看所有值</span><br><span class="line">1) &quot;field&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;field1&quot;</span><br><span class="line">4) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; hdel myhash field //删除一个字段</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; hgetall myhash</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">#############################################</span><br><span class="line">hlen 获取字符长度</span><br><span class="line">127.0.0.1:6379[2]&gt; hgetall myhash</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">3) &quot;field&quot;</span><br><span class="line">4) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; hlen myhash //获取hash字段数量</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">##############################################</span><br><span class="line">127.0.0.1:6379[2]&gt; hexists myhash field //判断field是否存在，1存在，0不存在</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; hexists myhash field3</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379[2]&gt; hgetall myhash</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">3) &quot;field&quot;</span><br><span class="line">4) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">##############################################</span><br><span class="line">获取所有的field</span><br><span class="line">获取所有的value</span><br><span class="line">127.0.0.1:6379[2]&gt; hkeys myhash //获取所有的field</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;field&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; hvals myhash //获取所有的value</span><br><span class="line">1) &quot;world&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; hgetall myhash</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">3) &quot;field&quot;</span><br><span class="line">4) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="zset-有序集合"><a href="#zset-有序集合" class="headerlink" title="zset(有序集合)"></a>zset(有序集合)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; zadd myset 1 one //添加一个值</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; zadd myset 2 two 3 three //添加多个值</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379[2]&gt; zrange myset 0 -1</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">##########################################</span><br><span class="line">127.0.0.1:6379[2]&gt; zadd salary 2000 dage</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; zadd salary 2500 erdi</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; zadd salary 250 xiaosan</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; ZRANGEBYSCORE salary -inf +inf //小--大 排序</span><br><span class="line">1) &quot;xiaosan&quot;</span><br><span class="line">2) &quot;dage&quot;</span><br><span class="line">3) &quot;erdi&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; ZRANGEBYSCORE salary -inf +inf withscores //带条件排序</span><br><span class="line">1) &quot;xiaosan&quot;</span><br><span class="line">2) &quot;250&quot;</span><br><span class="line">3) &quot;dage&quot;</span><br><span class="line">4) &quot;2000&quot;</span><br><span class="line">5) &quot;erdi&quot;</span><br><span class="line">6) &quot;2500&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; ZRANGEBYSCORE salary -inf +inf withscores</span><br><span class="line">1) &quot;xiaosan&quot;</span><br><span class="line">2) &quot;250&quot;</span><br><span class="line">3) &quot;erdi&quot;</span><br><span class="line">4) &quot;2500&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; ZREVRANGE salary 0 -1 //大到小排序</span><br><span class="line">1) &quot;erdi&quot;</span><br><span class="line">2) &quot;xiaosan&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">##########################################</span><br><span class="line">127.0.0.1:6379[2]&gt; ZRANGEBYSCORE salary -inf +inf withscores</span><br><span class="line">1) &quot;xiaosan&quot;</span><br><span class="line">2) &quot;250&quot;</span><br><span class="line">3) &quot;dage&quot;</span><br><span class="line">4) &quot;2000&quot;</span><br><span class="line">5) &quot;erdi&quot;</span><br><span class="line">6) &quot;2500&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; zrem salary dage //移除元素</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; zrange salary 0 -1</span><br><span class="line">1) &quot;xiaosan&quot;</span><br><span class="line">2) &quot;erdi&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">#############################################</span><br></pre></td></tr></table></figure><h3 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h3><h4 id="geospatial-地理空间"><a href="#geospatial-地理空间" class="headerlink" title="geospatial(地理空间)"></a>geospatial(地理空间)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="redis的基本事务操作"><a href="#redis的基本事务操作" class="headerlink" title="redis的基本事务操作"></a>redis的基本事务操作</h3><p>redis事务本质：一组命令的集合，一个事务中的所有命令都会被序列化，事务执行过程中，会按照顺序执行。</p><p>一次性、顺序性、排他性</p><p>redis事务没有隔离级别的概念</p><p>所有的命令在事务中，并没有直接执行，只有发起命令的时候才会执行，exec</p><p>redis 单条命令保证原子性，但是事务不保证原子性</p><blockquote><p>redis的事务：</p><ol><li>开启事务（multi）</li><li>命令入队（…）</li><li>执行事务（exec）</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正常执行事务</span><br><span class="line">127.0.0.1:6379[2]&gt; multi //开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; set k1 v1 //设置元素入队</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; exec //执行事务</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">4) OK</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line">##############################################</span><br><span class="line">放弃事务</span><br><span class="line">127.0.0.1:6379[2]&gt; keys *</span><br><span class="line">1) &quot;k4&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br><span class="line">3) &quot;k1&quot;</span><br><span class="line">4) &quot;k3&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; set k5 v5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; discard //退出当前事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; get k5</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>编译型异常（代码有问题），事务中所有的命令都不会执行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; multi //开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; set k1 v1 //入队操作</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; getset k2</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;getset&#x27; command //出现问题</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; exec //执行事务</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379[2]&gt; get k3 //所有命令都不会执行</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行时异常（1/0），如果事务队列中存在不合法命令，在执行命令的时候，其他命令是可以正常执行的，错误命令抛出异常</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; set k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; incr k1 //命令出错</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; exec</span><br><span class="line">1) (error) ERR value is not an integer or out of range </span><br><span class="line">2) OK</span><br><span class="line">3) OK</span><br><span class="line">127.0.0.1:6379[2]&gt; get k2 //其他命令正常执行</span><br><span class="line">&quot;v2&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="监控-watch"><a href="#监控-watch" class="headerlink" title="监控 watch"></a>监控 watch</h4><p>悲观锁：</p><p>很悲观，认为什么时候都会出问题，无论做什么都会加锁。</p><p>乐观锁：</p><ol><li>很乐观，认为什么时候都不会出问题，所以不会上锁，在更新数据的时候会判断，在此期间是否有人修改了数据</li><li>获取version</li><li>更新的时候比较version</li></ol><blockquote><p>redis 监视测试</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正常执行</span><br><span class="line">127.0.0.1:6379[2]&gt; set money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; set out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; watch money //监视money对象</span><br><span class="line">ok</span><br><span class="line">127.0.0.1:6379[2]&gt; multi //开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; decrby money 20 //减去20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; incrby out 20 //增加20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; exec //执行事务</span><br><span class="line">1) (integer) 80</span><br><span class="line">2) (integer) 20</span><br><span class="line">127.0.0.1:6379[2]&gt; get money </span><br><span class="line">&quot;80&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; get out</span><br><span class="line">&quot;20&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试多线程修改值，使用watch可以当做redis的乐观锁操作</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">线程一</span><br><span class="line">1) (integer) 70</span><br><span class="line">2) (integer) 30</span><br><span class="line">127.0.0.1:6379[2]&gt; watch money //监视money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; decrby money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; incrby money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; exec //执行之前，另一个线程修改了值，就会导致事务执行失败</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379[2]&gt; get money //修改后的值</span><br><span class="line">&quot;200&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt; get out</span><br><span class="line">&quot;30&quot;</span><br><span class="line">127.0.0.1:6379[2]&gt;</span><br><span class="line">#############################################</span><br><span class="line">另一个线程修改了值（在exec事务执行前）</span><br><span class="line">127.0.0.1:6379[2]&gt; set money 200</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>监视失败，重新监视新的值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; UNWATCH //如果失败，先解锁</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; watch money //重新监视</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; multi //开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; decrby money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; incrby out 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; exec //执行事务</span><br><span class="line">1) (integer) 190</span><br><span class="line">2) (integer) 40</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="jedis"><a href="#jedis" class="headerlink" title="jedis"></a>jedis</h3><blockquote><p>jedis 是redis官方推荐的java连接开发工具，使用java操作redis的中间件</p></blockquote><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    jedis依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    fastjson 依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>编码测试：</p><ol><li>连接数据库</li><li>操作命令</li><li>断开连接</li></ol></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJedis</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// new jedis对象</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在此之前打开本地redis-server服务</span></span><br><span class="line"><span class="comment">//控制台出现PONG 连接成功</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>jedis事务再理解</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTX</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        jedis.flushDB();<span class="comment">//清空数据库</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;hello1&quot;</span>,<span class="string">&quot;world1&quot;</span>);</span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">multi</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jsonObject.toJSONString();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            multi.set(<span class="string">&quot;user1&quot;</span>,result);</span><br><span class="line">            multi.set(<span class="string">&quot;user2&quot;</span>,result);</span><br><span class="line">            <span class="type">int</span> i=<span class="number">1</span>/<span class="number">0</span>;<span class="comment">//运行时异常</span></span><br><span class="line">            multi.exec(); <span class="comment">//执行事务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            multi.discard();<span class="comment">//放弃事务</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">            jedis.close();<span class="comment">//关闭连接</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="redis-conf详解"><a href="#redis-conf详解" class="headerlink" title="redis.conf详解"></a>redis.conf详解</h3><p><img src="/2022/12/30/redisstudy/image-20230102150717489.png" alt="image-20230102150717489"></p><p><img src="/2022/12/30/redisstudy/image-20230102150845373.png" alt="image-20230102150845373"></p><blockquote><p>网络</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind 127.0.0.1 -::1 //本机ip</span><br><span class="line">protected-mode yes //保护模式</span><br><span class="line">port 6379 //端口</span><br></pre></td></tr></table></figure><blockquote><p>通用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">daemonize yes //守护线程，默认是no，手动开启</span><br><span class="line">pidfile /var/run/redis_6379.pid //后台方式运行，需要一个pid文件</span><br><span class="line">####日志</span><br><span class="line"># Specify the server verbosity level.</span><br><span class="line"># This can be one of:</span><br><span class="line"># debug (a lot of information, useful for development/testing)</span><br><span class="line"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="line"># notice (moderately verbose, what you want in production probably)</span><br><span class="line"># warning (only very important / critical messages are logged)</span><br><span class="line">loglevel notice</span><br><span class="line">logfile &quot;&quot; //日志的文件夹位置</span><br><span class="line">databases 16 //数据库数量，默认16</span><br><span class="line">always-show-logo no //是否显示logo</span><br></pre></td></tr></table></figure><blockquote><p>快照</p></blockquote><p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件.rdb   .aof中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">save 3600 1 //3600s内，至少一个key发生了变化，会进行持久化操作</span><br><span class="line"> 300 100 </span><br><span class="line">     60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes //持久化出错，是否继续工作</span><br><span class="line">rdbcompression yes //是否压缩rdb文件</span><br><span class="line">rdbchecksum yes //保存rdb文件，进行检查</span><br><span class="line">dir ./ //rdb文件保存的目录</span><br></pre></td></tr></table></figure><h3 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a>redis持久化</h3><h4 id="rdb-redis-database"><a href="#rdb-redis-database" class="headerlink" title="rdb(redis database)"></a>rdb(redis database)</h4><p>rdb保存的文件是dump。rdb</p><p><img src="/2022/12/30/redisstudy/image-20230102154617798.png" alt="image-20230102154617798"></p><h4 id="aof-append-only-file"><a href="#aof-append-only-file" class="headerlink" title="aof(append only file)"></a>aof(append only file)</h4><p>aof保存的位置appendonly.aof文件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>swagger问题</title>
      <link href="/2022/12/21/swagger%E9%97%AE%E9%A2%98/"/>
      <url>/2022/12/21/swagger%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="Failed-to-start-bean-‘documentationPluginsBootstrapper’"><a href="#Failed-to-start-bean-‘documentationPluginsBootstrapper’" class="headerlink" title="Failed to start bean ‘documentationPluginsBootstrapper’;"></a>Failed to start bean ‘documentationPluginsBootstrapper’;</h3><h3 id="解决，pom-xml中添加依赖"><a href="#解决，pom-xml中添加依赖" class="headerlink" title="解决，pom.xml中添加依赖"></a>解决，pom.xml中添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>25.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="还需要在application-properties中添加"><a href="#还需要在application-properties中添加" class="headerlink" title="还需要在application.properties中添加"></a>还需要在application.properties中添加</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/swagger-ui.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springMVC静态资源导出配置</title>
      <link href="/2022/12/18/springMVC%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%AF%BC%E5%87%BA%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/12/18/springMVC%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%AF%BC%E5%87%BA%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="静态资源导出-pom-xml"><a href="#静态资源导出-pom-xml" class="headerlink" title="静态资源导出 pom.xml"></a>静态资源导出 pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC字符集问题</title>
      <link href="/2022/12/18/SpringMVC%E5%AD%97%E7%AC%A6%E9%9B%86%E9%97%AE%E9%A2%98/"/>
      <url>/2022/12/18/SpringMVC%E5%AD%97%E7%AC%A6%E9%9B%86%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMVC-annotation-遇到的字符集问题"><a href="#SpringMVC-annotation-遇到的字符集问题" class="headerlink" title="SpringMVC annotation 遇到的字符集问题"></a>SpringMVC annotation 遇到的字符集问题</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException 3 字节的 UTF-8 序列的字节 3 无效</span><br></pre></td></tr></table></figure><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><h3 id="配置字符集，在pom-xml文件中"><a href="#配置字符集，在pom-xml文件中" class="headerlink" title="配置字符集，在pom.xml文件中"></a>配置字符集，在pom.xml文件中</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span>            </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>将进酒</title>
      <link href="/2022/12/14/%E5%B0%86%E8%BF%9B%E9%85%92/"/>
      <url>/2022/12/14/%E5%B0%86%E8%BF%9B%E9%85%92/</url>
      
        <content type="html"><![CDATA[<h1 id="将进酒"><a href="#将进酒" class="headerlink" title="将进酒"></a>将进酒</h1><p><a href="https://so.gushiwen.cn/authorv_b90660e3e492.aspx">李白</a> <a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E5%94%90%E4%BB%A3">〔唐代〕</a></p><p>君不见黄河之水天上来，奔流到海不复回。<br>君不见高堂明镜悲白发，朝如青丝暮成雪。<br>人生得意须尽欢，莫使金樽空对月。<br>天生我材必有用，千金散尽还复来。<br>烹羊宰牛且为乐，会须一饮三百杯。<br>岑夫子，丹丘生，将进酒，杯莫停。<br>与君歌一曲，请君为我倾耳听。<br>钟鼓馔玉不足贵，但愿长醉不愿醒。<br>古来圣贤皆寂寞，惟有饮者留其名。<br>陈王昔时宴平乐，斗酒十千恣欢谑。<br>主人何为言少钱，径须沽取对君酌。<br>五花马、千金裘，呼儿将出换美酒，与尔同销万古愁。</p><p><img src="/2022/12/14/%E5%B0%86%E8%BF%9B%E9%85%92/1.jpg" alt="1"></p><h3 id="测试使用，后期会修改…"><a href="#测试使用，后期会修改…" class="headerlink" title="测试使用，后期会修改…"></a>测试使用，后期会修改…</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/13/hello-world/"/>
      <url>/2022/12/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>玩转Git</title>
      <link href="/2022/12/11/%E7%8E%A9%E8%BD%ACGit/"/>
      <url>/2022/12/11/%E7%8E%A9%E8%BD%ACGit/</url>
      
        <content type="html"><![CDATA[<h1 id="玩转Git"><a href="#玩转Git" class="headerlink" title="玩转Git"></a>玩转Git</h1><h3 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd      改变目录</span><br><span class="line">cd ..   回退上一个目录</span><br><span class="line">pwd     显示当前所在的目录路径</span><br><span class="line">ls(ll)  列出当前目录中的所有文件</span><br><span class="line">touch   新建一个文件</span><br><span class="line">rm      删除一个文件</span><br><span class="line">mkdir   新建一个文件夹</span><br><span class="line">rm -r   删除一个文件夹</span><br><span class="line">reset   重新初始化终端/清屏</span><br><span class="line">clear   清屏</span><br><span class="line">history 查看命令历史</span><br><span class="line">help    帮助</span><br><span class="line">exit    退出</span><br><span class="line">#       表示注释</span><br></pre></td></tr></table></figure><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config -l  查看配置(显示name 和 email)</span><br><span class="line">git config --system --list  查看系统配置(没有name 和 email)</span><br><span class="line">git config --global --list  查看本地配置(单独显示出name 和 email)</span><br><span class="line">git config --global user.name &quot;&quot;  设置用户名</span><br><span class="line">git config --global user.email &quot;&quot;  设置邮箱</span><br></pre></td></tr></table></figure><h3 id="Git基本理论"><a href="#Git基本理论" class="headerlink" title="Git基本理论"></a>Git基本理论</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Git本地三个工作区域</span><br><span class="line">工作目录(Working Directory)</span><br><span class="line">暂存区(Stage/Index)</span><br><span class="line">资源库(Repository/Git Directory)</span><br><span class="line">一个远程</span><br><span class="line">Git远程仓库(Remote Directory)</span><br><span class="line">---------------------------</span><br><span class="line">git add files</span><br><span class="line">把本地文件添加到暂存区（stage）</span><br><span class="line">git commit</span><br><span class="line">提交到本地仓库</span><br><span class="line">git push</span><br><span class="line">推到远程仓库</span><br></pre></td></tr></table></figure><h3 id="Git项目创建及克隆"><a href="#Git项目创建及克隆" class="headerlink" title="Git项目创建及克隆"></a>Git项目创建及克隆</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone url  远程项目克隆到本地</span><br><span class="line">git status  查看文件状态</span><br><span class="line">---------------------------</span><br><span class="line">git init                   初始化仓库</span><br><span class="line">git add .                  添加到暂存区（文件被跟踪）</span><br><span class="line">git commit -m &quot;注释内容&quot;  （暂存区）提交到本地仓库</span><br><span class="line">---------------------------</span><br><span class="line">忽略文件</span><br><span class="line">创建 .gitignore 文件</span><br><span class="line">例子:</span><br><span class="line">*.txt      忽略所有 .txt 结尾的文件</span><br><span class="line">!lib.txt   lib.txt除外</span><br><span class="line">build/     忽略build/ 目录下的所有文件</span><br><span class="line">..........</span><br></pre></td></tr></table></figure><p>###使用Gitee</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设置本机绑定 SSH 公钥，实现 免密登录</span><br><span class="line">进入 C:\user\administrator\.ssh 目录(首次创建没有内容 .ssh)</span><br><span class="line">生成公钥</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><h3 id="IDEA中集成Git操作"><a href="#IDEA中集成Git操作" class="headerlink" title="IDEA中集成Git操作"></a>IDEA中集成Git操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="git相关的配置文件：保存在本地-所有的配置文件都保存在本地"><a href="#git相关的配置文件：保存在本地-所有的配置文件都保存在本地" class="headerlink" title="git相关的配置文件：保存在本地(所有的配置文件都保存在本地)"></a>git相关的配置文件：保存在本地(所有的配置文件都保存在本地)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Git\etc\gitconfig:  Git安装目录下的 --system系统级别</span><br><span class="line">用户配置(name and email) C盘\gitconfig</span><br></pre></td></tr></table></figure><p>测试中，后期会修改和添加…</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>玩转IDEA</title>
      <link href="/2022/12/10/%E7%8E%A9%E8%BD%ACIDEA/"/>
      <url>/2022/12/10/%E7%8E%A9%E8%BD%ACIDEA/</url>
      
        <content type="html"><![CDATA[<h1 id="玩转IDEA"><a href="#玩转IDEA" class="headerlink" title="玩转IDEA"></a>玩转IDEA</h1><h2 id="单词缩写"><a href="#单词缩写" class="headerlink" title="单词缩写"></a>单词缩写</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SDK</span><br><span class="line">Software-Development-Kit(软件开发工具包)</span><br><span class="line">API</span><br><span class="line">Application-Programming-Interface(应用编程接口)</span><br><span class="line">DLL</span><br><span class="line">Dynamic-Link-Libary(动态连接库)</span><br></pre></td></tr></table></figure><h3 id="安装目录结构"><a href="#安装目录结构" class="headerlink" title="安装目录结构"></a>安装目录结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin：     容器，执行文件和启动参数等</span><br><span class="line">help：    快捷键文档和其他帮助文档</span><br><span class="line">jre64：   64 位java 运行环境</span><br><span class="line">lib：     idea 依赖的类库</span><br><span class="line">license： 各个插件许可</span><br><span class="line">plugin：  插件</span><br></pre></td></tr></table></figure><h3 id="idea常用快捷键"><a href="#idea常用快捷键" class="headerlink" title="idea常用快捷键"></a>idea常用快捷键</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shift+f4  截图</span><br><span class="line">Ctrl+X    删除行</span><br><span class="line">ctrl+y    删除一行代码</span><br><span class="line">ctrl+d复制当前行到下一行</span><br><span class="line">ctrl+h显示当前类到继承层次</span><br><span class="line">Ctrl+=展开代码</span><br><span class="line">Ctrl+-折叠代码</span><br><span class="line">Ctrl+/    注释</span><br><span class="line">ctrl+f打开查找</span><br><span class="line">Ctrl+Shift+/  选中的行多行注释</span><br><span class="line">Ctrl+/        选中的行注释或取消注释</span><br><span class="line">Ctrl+Shift+F10运行当前文件</span><br><span class="line">Ctrl+P        提示方法的参数</span><br><span class="line">Ctrl+Alt+L    选中的行代码格式化</span><br><span class="line">Ctrl+Shift+up/down  上下移动当前行代码</span><br><span class="line">Alt+Insert        添加一个类所需要到构造方法等</span><br></pre></td></tr></table></figure><h3 id="设置背景"><a href="#设置背景" class="headerlink" title="设置背景"></a>设置背景</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">安装插件：Backgroud Image Plus +(可以设置多张背景切换)</span><br><span class="line">设置壁纸：File-&gt;Settings-&gt;Appearance-&gt;BackgroundImage(设置单张背景图片)</span><br></pre></td></tr></table></figure><p><img src="/2022/12/10/%E7%8E%A9%E8%BD%ACIDEA/image-20221212191632915.png" alt="image-20221212191632915"></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">翻译</span><br><span class="line">安装插件：Translation</span><br><span class="line">设置：Settings-&gt;tools</span><br><span class="line"></span><br><span class="line">代码自动补全</span><br><span class="line">安装插件：Codota AI</span><br></pre></td></tr></table></figure><h3 id="idea设置"><a href="#idea设置" class="headerlink" title="idea设置"></a>idea设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">忽略大小写提示</span><br><span class="line">settings-&gt;editor-&gt;code-completion::case-sensitive-completion 选择none(新版本：取消勾选Match cast)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">设置代码颜色</span><br><span class="line">settings editor language-defaults(自己慢慢研究)</span><br><span class="line"></span><br><span class="line">设置项目编码</span><br><span class="line">settings editor file-encodings</span><br><span class="line"></span><br><span class="line">maven设置</span><br><span class="line">settings maven</span><br><span class="line">1:maven-home-directory</span><br><span class="line">2:user-settings-file</span><br><span class="line">3:本地仓库地址 maven-repo(自己设置的)</span><br><span class="line"></span><br><span class="line">设置自动导包</span><br><span class="line">settings editor general auto-import</span><br><span class="line">勾选Optimize imports on the fly</span><br><span class="line">表示IDEA将在我们书写代码的时候自动帮我们优化导入的包</span><br><span class="line">勾选Add unambiguous imports on the fly</span><br><span class="line">表示IDEA将在我们书写代码的时候自动帮我们导入需要用到的包。</span><br><span class="line">---------------------------------------------------</span><br><span class="line"></span><br><span class="line">idea开机自启设置（自动打开最后关闭的项目）</span><br><span class="line">settings appearance&amp;behavior system-settings:reopen-last-project-on-startup</span><br><span class="line"></span><br><span class="line">设置是否单行显示tabs的操作</span><br><span class="line">settings editor general editor-tabs</span><br><span class="line"></span><br><span class="line">修改类头的注释信息</span><br><span class="line">settings editor file-and-code-templates</span><br><span class="line"></span><br><span class="line">设置项目文件编码</span><br><span class="line">settings editor file-encodings</span><br></pre></td></tr></table></figure><h3 id="debug操作"><a href="#debug操作" class="headerlink" title="debug操作"></a>debug操作</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">F7</span><br><span class="line">进入方法内部</span><br><span class="line">F8</span><br><span class="line">下一行</span><br><span class="line">F9</span><br><span class="line">跳到下一个断点</span><br></pre></td></tr></table></figure><p>测试中，后期会修改…</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<p>努力创作中，敬请期待…</p>]]></content>
      
    </entry>
    
    
  
</search>
